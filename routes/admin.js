const express = require('express');
const bcrypt = require('bcryptjs');
const { body, validationResult } = require('express-validator');
const { query, getDBStats, healthCheck } = require('../config/database');
const { requireAuth, requireRole, canManageUsers } = require('../middleware/auth');

const router = express.Router();

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userValidation = [
    body('username')
        .trim()
        .isLength({ min: 3, max: 50 })
        .withMessage('–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤')
        .matches(/^[a-zA-Z0-9_]+$/)
        .withMessage('–õ–æ–≥–∏–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è'),
    body('password')
        .isLength({ min: 6 })
        .withMessage('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'),
    body('fullName')
        .trim()
        .isLength({ min: 2, max: 100 })
        .withMessage('–ü–æ–ª–Ω–æ–µ –∏–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤'),
    body('role')
        .isIn(['admin', 'moderator', 'skd'])
        .withMessage('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
    body('email')
        .optional({ checkFalsy: true })
        .isEmail()
        .withMessage('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å')
];

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
router.get('/users', requireAuth, canManageUsers, async (req, res) => {
    try {
        const { page = 1, limit = 50, role, active_only } = req.query;
        const offset = (page - 1) * limit;

        let queryText = `
            SELECT
                u.id, u.username, u.role, u.full_name, u.email,
                u.is_active, u.created_at, u.updated_at, u.last_login,
                creator.full_name as created_by_name
            FROM users u
                     LEFT JOIN users creator ON u.created_by = creator.id
        `;

        const conditions = [];
        const params = [];

        if (role && ['admin', 'moderator', 'skd'].includes(role)) {
            conditions.push(`u.role = $${params.length + 1}`);
            params.push(role);
        }

        if (active_only === 'true') {
            conditions.push(`u.is_active = true`);
        }

        if (conditions.length > 0) {
            queryText += ' WHERE ' + conditions.join(' AND ');
        }

        queryText += `
            ORDER BY u.created_at DESC
            LIMIT $${params.length + 1} OFFSET $${params.length + 2}
        `;

        params.push(limit, offset);

        const usersResult = await query(queryText, params);

        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        let countQuery = 'SELECT COUNT(*) as total FROM users u';
        if (conditions.length > 0) {
            countQuery += ' WHERE ' + conditions.join(' AND ');
        }

        const countResult = await query(countQuery, params.slice(0, -2));
        const total = parseInt(countResult.rows[0].total);

        res.json({
            users: usersResult.rows.map(user => ({
                id: user.id,
                username: user.username,
                role: user.role,
                fullName: user.full_name,
                email: user.email,
                isActive: user.is_active,
                createdAt: user.created_at,
                updatedAt: user.updated_at,
                lastLogin: user.last_login,
                createdByName: user.created_by_name
            })),
            pagination: {
                page: parseInt(page),
                limit: parseInt(limit),
                total: total,
                pages: Math.ceil(total / limit)
            }
        });

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            details: process.env.NODE_ENV === 'development' ? err.message : undefined
        });
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/users', requireAuth, canManageUsers, userValidation, async (req, res) => {
    try {
        console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            console.log('‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', errors.array());
            return res.status(400).json({
                error: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                details: errors.array()
            });
        }

        const { username, password, fullName, role, email } = req.body;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞
        const existingUser = await query(
            'SELECT id FROM users WHERE username = $1',
            [username]
        );

        if (existingUser.rows.length > 0) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        if (email) {
            const existingEmail = await query(
                'SELECT id FROM users WHERE email = $1',
                [email]
            );

            if (existingEmail.rows.length > 0) {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
            }
        }

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const saltRounds = 12;
        const passwordHash = await bcrypt.hash(password, saltRounds);

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUserResult = await query(`
            INSERT INTO users (
                username, password_hash, full_name, role, email,
                is_active, created_by
            ) VALUES ($1, $2, $3, $4, $5, true, $6)
                RETURNING id, username, full_name, role, email, is_active, created_at
        `, [
            username, passwordHash, fullName, role,
            email || null, req.user.id
        ]);

        const newUser = newUserResult.rows[0];
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', {
            id: newUser.id,
            username: newUser.username,
            role: newUser.role
        });

        res.status(201).json({
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
            user: {
                id: newUser.id,
                username: newUser.username,
                fullName: newUser.full_name,
                role: newUser.role,
                email: newUser.email,
                isActive: newUser.is_active,
                createdAt: newUser.created_at
            }
        });

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);

        let errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
        let statusCode = 500;

        if (err.code === '23505') { // Unique constraint violation
            if (err.constraint && err.constraint.includes('username')) {
                errorMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
                statusCode = 400;
            } else if (err.constraint && err.constraint.includes('email')) {
                errorMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
                statusCode = 400;
            }
        }

        res.status(statusCode).json({
            error: errorMessage,
            details: process.env.NODE_ENV === 'development' ? err.message : undefined
        });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.put('/users/:id', requireAuth, canManageUsers, async (req, res) => {
    try {
        const { id } = req.params;
        const { fullName, role, email, isActive } = req.body;

        console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${id}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingUser = await query('SELECT * FROM users WHERE id = $1', [id]);

        if (!existingUser.rows.length) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if (parseInt(id) === req.user.id) {
            return res.status(400).json({ error: '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email (–µ—Å–ª–∏ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è)
        if (email && email !== existingUser.rows[0].email) {
            const emailCheck = await query(
                'SELECT id FROM users WHERE email = $1 AND id != $2',
                [email, id]
            );

            if (emailCheck.rows.length > 0) {
                return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
            }
        }

        const result = await query(`
            UPDATE users SET
                             full_name = $1, role = $2, email = $3, is_active = $4,
                             updated_at = CURRENT_TIMESTAMP, updated_by = $5
            WHERE id = $6
                RETURNING id, username, full_name, role, email, is_active, updated_at
        `, [
            fullName || existingUser.rows[0].full_name,
            role || existingUser.rows[0].role,
            email,
            isActive !== undefined ? isActive : existingUser.rows[0].is_active,
            req.user.id,
            id
        ]);

        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');

        res.json({
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
            user: {
                id: result.rows[0].id,
                username: result.rows[0].username,
                fullName: result.rows[0].full_name,
                role: result.rows[0].role,
                email: result.rows[0].email,
                isActive: result.rows[0].is_active,
                updatedAt: result.rows[0].updated_at
            }
        });

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            details: process.env.NODE_ENV === 'development' ? err.message : undefined
        });
    }
});

// –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/users/:id/reset-password', requireAuth, canManageUsers, async (req, res) => {
    try {
        const { id } = req.params;
        const { newPassword } = req.body;

        console.log(`üîê –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${id}`);

        if (!newPassword || newPassword.length < 6) {
            return res.status(400).json({ error: '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userCheck = await query('SELECT username FROM users WHERE id = $1', [id]);

        if (!userCheck.rows.length) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        const saltRounds = 12;
        const passwordHash = await bcrypt.hash(newPassword, saltRounds);

        await query(
            'UPDATE users SET password_hash = $1, updated_at = CURRENT_TIMESTAMP, updated_by = $2 WHERE id = $3',
            [passwordHash, req.user.id, id]
        );

        // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query('DELETE FROM user_sessions WHERE user_id = $1', [id]);

        console.log('‚úÖ –ü–∞—Ä–æ–ª—å —Å–±—Ä–æ—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');

        res.json({
            message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω –∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã',
            username: userCheck.rows[0].username
        });

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', err);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è',
            details: process.env.NODE_ENV === 'development' ? err.message : undefined
        });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.delete('/users/:id', requireAuth, canManageUsers, async (req, res) => {
    try {
        const { id } = req.params;

        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${id}`);

        // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if (parseInt(id) === req.user.id) {
            return res.status(400).json({ error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userCheck = await query('SELECT username FROM users WHERE id = $1', [id]);

        if (!userCheck.rows.length) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query('DELETE FROM user_sessions WHERE user_id = $1', [id]);

        // –û–±–Ω—É–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        await query('UPDATE visitors SET created_by = NULL WHERE created_by = $1', [id]);
        await query('UPDATE visitors SET updated_by = NULL WHERE updated_by = $1', [id]);
        await query('UPDATE scans SET scanned_by = NULL WHERE scanned_by = $1', [id]);

        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const result = await query('DELETE FROM users WHERE id = $1 RETURNING username', [id]);

        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');

        res.json({
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
            username: result.rows[0].username
        });

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            details: process.env.NODE_ENV === 'development' ? err.message : undefined
        });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
router.get('/health', async (req, res) => {
    try {
        const dbHealth = await healthCheck();

        res.status(dbHealth.healthy ? 200 : 503).json({
            healthy: dbHealth.healthy,
            database: dbHealth,
            timestamp: new Date(),
            version: process.env.APP_VERSION || '1.0.0',
            node_version: process.version,
            uptime: process.uptime()
        });

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã:', err);
        res.status(503).json({
            healthy: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã',
            timestamp: new Date()
        });
    }
});

// –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
router.get('/stats', requireAuth, requireRole(['admin']), async (req, res) => {
    try {
        const dbStats = await getDBStats();

        const systemStats = {
            database: dbStats,
            system: {
                node_version: process.version,
                uptime: process.uptime(),
                memory_usage: process.memoryUsage(),
                platform: process.platform,
                arch: process.arch
            },
            timestamp: new Date()
        };

        res.json(systemStats);

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            details: process.env.NODE_ENV === 'development' ? err.message : undefined
        });
    }
});

module.exports = router;