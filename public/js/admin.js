// js/admin.js - –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
const admin = {
    currentPage: 1,
    totalPages: 1,
    users: [],
    filters: {
        role: '',
        active_only: ''
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
    async init() {
        console.log('üëë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è');

        await this.loadUsers();
        await this.loadSystemStats();
        this.setupEventListeners();

        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.startAutoRefresh();
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        const userForm = document.getElementById('user-form');
        const editUserForm = document.getElementById('edit-user-form');

        if (userForm) {
            userForm.addEventListener('submit', this.handleCreateUser.bind(this));
        }

        if (editUserForm) {
            editUserForm.addEventListener('submit', this.handleEditUser.bind(this));
        }
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async loadUsers(page = 1) {
        try {
            console.log('üë• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', page);

            const params = new URLSearchParams({
                page: page,
                limit: 25,
                ...this.filters
            });

            const response = await fetch(`/api/admin/users?${params}`);

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();

            this.users = data.users;
            this.displayUsers(data.users);
            this.updatePagination(data.pagination);
            this.updateUsersCount(data.pagination.total);

        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
            this.displayError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + err.message);
        }
    },

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    displayUsers(users) {
        const container = document.getElementById('users-table');
        if (!container) return;

        if (!users || users.length === 0) {
            container.innerHTML = '<div class="empty">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }

        const table = `
            <table>
                <thead>
                    <tr>
                        <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
                        <th>–†–æ–ª—å</th>
                        <th>Email</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥</th>
                        <th>–°–æ–∑–¥–∞–Ω</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    ${users.map(user => `
                        <tr data-user-id="${user.id}">
                            <td>
                                <strong>${user.fullName}</strong>
                                <br><small style="color: #666;">@${user.username}</small>
                            </td>
                            <td>
                                <span class="role-${user.role}">
                                    ${this.getRoleIcon(user.role)} ${utils.getRoleText(user.role)}
                                </span>
                            </td>
                            <td>
                                ${user.email ?
            `<a href="mailto:${user.email}" style="color: #007bff;">${user.email}</a>` :
            '<span style="color: #999;">–ù–µ —É–∫–∞–∑–∞–Ω</span>'
        }
                            </td>
                            <td>
                                <span class="status-${user.isActive ? 'active' : 'blocked'}">
                                    ${user.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}
                                </span>
                            </td>
                            <td>
                                ${user.lastLogin ?
            utils.formatDateTime(user.lastLogin) :
            '<span style="color: #999;">–ù–∏–∫–æ–≥–¥–∞</span>'
        }
                            </td>
                            <td>
                                ${utils.formatDate(user.createdAt)}
                                ${user.createdByName ?
            `<br><small style="color: #666;">${user.createdByName}</small>` : ''
        }
                            </td>
                            <td>
                                <div style="display: flex; gap: 4px; flex-wrap: wrap;">
                                    <button onclick="admin.editUser(${user.id})" 
                                            class="secondary-btn" 
                                            title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                                            style="padding: 6px 8px; font-size: 12px;">
                                        ‚úèÔ∏è
                                    </button>
                                    ${user.username !== auth.currentUser?.username ? `
                                        <button onclick="admin.resetPassword(${user.id})" 
                                                class="secondary-btn" 
                                                title="–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è"
                                                style="padding: 6px 8px; font-size: 12px;">
                                            üîë
                                        </button>
                                        <button onclick="admin.toggleUserStatus(${user.id}, ${user.isActive})" 
                                                class="secondary-btn" 
                                                title="${user.isActive ? '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'}"
                                                style="padding: 6px 8px; font-size: 12px;">
                                            ${user.isActive ? 'üö´' : '‚úÖ'}
                                        </button>
                                        <button onclick="admin.deleteUser(${user.id})" 
                                                class="secondary-btn" 
                                                title="–£–¥–∞–ª–∏—Ç—å"
                                                style="padding: 6px 8px; font-size: 12px; background: #dc3545;">
                                            üóëÔ∏è
                                        </button>
                                    ` : '<small style="color: #999;">–¢–µ–∫—É—â–∏–π</small>'}
                                </div>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;

        container.innerHTML = table;
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Ä–æ–ª–∏
    getRoleIcon(role) {
        const icons = {
            'admin': 'üëë',
            'moderator': '‚öôÔ∏è',
            'skd': 'üîí'
        };
        return icons[role] || 'üë§';
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    updateUsersCount(total) {
        const counter = document.getElementById('users-count');
        if (counter) {
            counter.textContent = `${total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    updatePagination(pagination) {
        this.currentPage = pagination.page;
        this.totalPages = pagination.pages;

        utils.renderPagination('users-pagination', pagination, 'admin.loadUsers');
    },

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async handleCreateUser(e) {
        e.preventDefault();

        const submitBtn = e.target.querySelector('button[type="submit"]');
        const btnText = submitBtn.querySelector('.btn-text');
        const btnLoading = submitBtn.querySelector('.btn-loading');

        try {
            submitBtn.disabled = true;
            btnText.classList.add('hidden');
            btnLoading.classList.remove('hidden');

            const formData = new FormData(e.target);
            const userData = {
                username: formData.get('username'),
                password: formData.get('password'),
                fullName: formData.get('fullName'),
                role: formData.get('role'),
                email: formData.get('email') || null
            };

            const response = await fetch('/api/admin/users', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(userData)
            });

            const data = await response.json();

            if (response.ok) {
                utils.showAlert('success', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
                this.hideCreateUserForm();
                this.loadUsers(1);
            } else {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }

        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
            utils.showAlert('error', err.message);
        } finally {
            submitBtn.disabled = false;
            btnText.classList.remove('hidden');
            btnLoading.classList.add('hidden');
        }
    },

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async editUser(userId) {
        try {
            const user = this.users.find(u => u.id === userId);
            if (!user) {
                utils.showAlert('error', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
            document.getElementById('edit-user-id').value = user.id;
            document.getElementById('edit-username').value = user.username;
            document.getElementById('edit-fullName').value = user.fullName;
            document.getElementById('edit-role').value = user.role;
            document.getElementById('edit-email').value = user.email || '';
            document.getElementById('edit-isActive').checked = user.isActive;

            this.showEditUserForm();

        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
            utils.showAlert('error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async handleEditUser(e) {
        e.preventDefault();

        const submitBtn = e.target.querySelector('button[type="submit"]');
        const btnText = submitBtn.querySelector('.btn-text');
        const btnLoading = submitBtn.querySelector('.btn-loading');

        try {
            submitBtn.disabled = true;
            btnText.classList.add('hidden');
            btnLoading.classList.remove('hidden');

            const userId = document.getElementById('edit-user-id').value;
            const formData = new FormData(e.target);
            const userData = {
                fullName: formData.get('fullName'),
                role: formData.get('role'),
                email: formData.get('email') || null,
                isActive: formData.has('isActive')
            };

            const response = await fetch(`/api/admin/users/${userId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(userData)
            });

            const data = await response.json();

            if (response.ok) {
                utils.showAlert('success', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
                this.hideEditUserForm();
                this.loadUsers(this.currentPage);
            } else {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }

        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
            utils.showAlert('error', err.message);
        } finally {
            submitBtn.disabled = false;
            btnText.classList.remove('hidden');
            btnLoading.classList.add('hidden');
        }
    },

    // –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async resetPassword(userId) {
        const user = this.users.find(u => u.id === userId);
        if (!user) return;

        const newPassword = prompt(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${user.username}":`);
        if (!newPassword || newPassword.length < 6) {
            utils.showAlert('error', '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
            return;
        }

        if (!confirm(`–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${user.username}"?`)) {
            return;
        }

        try {
            const response = await fetch(`/api/admin/users/${userId}/reset-password`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ newPassword })
            });

            const data = await response.json();

            if (response.ok) {
                utils.showAlert('success', '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω');
            } else {
                throw new Error(data.error);
            }
        } catch (err) {
            utils.showAlert('error', '–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: ' + err.message);
        }
    },

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async toggleUserStatus(userId, currentStatus) {
        const user = this.users.find(u => u.id === userId);
        if (!user) return;

        const action = currentStatus ? '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å';

        if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ ${action} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${user.username}"?`)) {
            return;
        }

        try {
            const response = await fetch(`/api/admin/users/${userId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    ...user,
                    isActive: !currentStatus
                })
            });

            const data = await response.json();

            if (response.ok) {
                utils.showAlert('success', data.message);
                this.loadUsers(this.currentPage);
            } else {
                throw new Error(data.error);
            }
        } catch (err) {
            utils.showAlert('error', '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ' + err.message);
        }
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async deleteUser(userId) {
        const user = this.users.find(u => u.id === userId);
        if (!user) return;

        if (!confirm(`–í–ù–ò–ú–ê–ù–ò–ï! –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${user.username}".\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`)) {
            return;
        }

        try {
            const response = await fetch(`/api/admin/users/${userId}`, {
                method: 'DELETE'
            });

            const data = await response.json();

            if (response.ok) {
                utils.showAlert('success', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
                this.loadUsers(this.currentPage);
            } else {
                throw new Error(data.error);
            }
        } catch (err) {
            utils.showAlert('error', '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + err.message);
        }
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async loadSystemStats() {
        try {
            const response = await fetch('/api/admin/stats');
            const data = await response.json();

            if (response.ok) {
                this.updateSystemStats(data);
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', data.error);
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    updateSystemStats(data) {
        const stats = data.database || {};

        this.updateStatElement('total-users',
            parseInt(stats.active_users || 0) + parseInt(stats.inactive_users || 0));
        this.updateStatElement('active-users', stats.active_users || 0);
        this.updateStatElement('total-sessions', stats.active_sessions || 0);
        this.updateStatElement('system-uptime',
            Math.floor((data.system?.uptime || 0) / 3600));
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    updateStatElement(elementId, value) {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = value;
        }
    },

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    filterUsers() {
        this.filters.role = document.getElementById('role-filter')?.value || '';
        this.filters.active_only = document.getElementById('active-filter')?.value || '';

        this.loadUsers(1);
    },

    // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
    resetFilters() {
        const roleFilter = document.getElementById('role-filter');
        const activeFilter = document.getElementById('active-filter');

        if (roleFilter) roleFilter.value = '';
        if (activeFilter) activeFilter.value = '';

        this.filters = { role: '', active_only: '' };
        this.loadUsers(1);
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async refreshUsers() {
        await this.loadUsers(this.currentPage);
        utils.showAlert('success', '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω');
    },

    // –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    showCreateUserForm() {
        const modal = document.getElementById('create-user-modal');
        const form = document.getElementById('user-form');

        if (modal) modal.classList.remove('hidden');
        if (form) form.reset();
    },

    // –°–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    hideCreateUserForm() {
        const modal = document.getElementById('create-user-modal');
        const form = document.getElementById('user-form');

        if (modal) modal.classList.add('hidden');
        if (form) form.reset();
    },

    // –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    showEditUserForm() {
        const modal = document.getElementById('edit-user-modal');
        if (modal) modal.classList.remove('hidden');
    },

    // –°–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    hideEditUserForm() {
        const modal = document.getElementById('edit-user-modal');
        const form = document.getElementById('edit-user-form');

        if (modal) modal.classList.add('hidden');
        if (form) form.reset();
    },

    // –ü–æ–∫–∞–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    async showSystemInfo() {
        const modal = document.getElementById('system-info-modal');
        const content = document.getElementById('system-info-content');

        if (modal) modal.classList.remove('hidden');
        if (content) content.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...</div>';

        await this.loadSystemInfo();
    },

    // –°–∫—Ä—ã—Ç–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    hideSystemInfo() {
        const modal = document.getElementById('system-info-modal');
        if (modal) modal.classList.add('hidden');
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    async loadSystemInfo() {
        try {
            const response = await fetch('/api/admin/stats');
            const data = await response.json();

            const content = document.getElementById('system-info-content');
            if (!content) return;

            content.innerHTML = `
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 30px;">
                    <div>
                        <h4>üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</h4>
                        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-top: 10px;">
                            <p><strong>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</strong> ${data.database?.active_users || 0}</p>
                            <p><strong>–í—Å–µ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π:</strong> ${data.database?.total_visitors || 0}</p>
                            <p><strong>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏:</strong> ${data.database?.active_visitors || 0}</p>
                            <p><strong>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è:</strong> ${data.database?.today_scans || 0}</p>
                            <p><strong>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:</strong> ${data.database?.active_sessions || 0}</p>
                        </div>
                    </div>

                    <div>
                        <h4>üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞</h4>
                        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-top: 10px;">
                            <p><strong>–í–µ—Ä—Å–∏—è Node.js:</strong> ${data.system?.node_version || 'N/A'}</p>
                            <p><strong>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</strong> ${Math.floor((data.system?.uptime || 0) / 3600)}—á ${Math.floor(((data.system?.uptime || 0) % 3600) / 60)}–º</p>
                            <p><strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> ${data.system?.platform || 'N/A'}</p>
                            <p><strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</strong> ${data.system?.arch || 'N/A'}</p>
                            <p><strong>–ü–∞–º—è—Ç—å:</strong> ${Math.round((data.system?.memory_usage?.heapUsed || 0) / 1024 / 1024)}MB</p>
                        </div>
                    </div>
                </div>

                <div style="margin-top: 20px;">
                    <h4>üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏</h4>
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-top: 10px;">
                        <p><strong>Heap Used:</strong> ${Math.round((data.system?.memory_usage?.heapUsed || 0) / 1024 / 1024)}MB</p>
                        <p><strong>Heap Total:</strong> ${Math.round((data.system?.memory_usage?.heapTotal || 0) / 1024 / 1024)}MB</p>
                        <p><strong>RSS:</strong> ${Math.round((data.system?.memory_usage?.rss || 0) / 1024 / 1024)}MB</p>
                        <p><strong>External:</strong> ${Math.round((data.system?.memory_usage?.external || 0) / 1024 / 1024)}MB</p>
                    </div>
                </div>
            `;

        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', err);
            const content = document.getElementById('system-info-content');
            if (content) {
                content.innerHTML = `
                    <div style="text-align: center; color: #dc3545; padding: 20px;">
                        ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    </div>
                `;
            }
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    async refreshSystemInfo() {
        await this.loadSystemInfo();
        utils.showAlert('success', '–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    },

    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    startAutoRefresh() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(async () => {
            if (document.visibilityState === 'visible') {
                await this.loadSystemStats();
            }
        }, 30000);
    },

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
    displayError(message) {
        const container = document.getElementById('users-table');
        if (container) {
            container.innerHTML = `
                <div style="text-align: center; padding: 40px; color: #dc3545;">
                    <h3>‚ùå ${message}</h3>
                    <button onclick="admin.loadUsers()" class="primary-btn" style="margin-top: 15px;">
                        üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                </div>
            `;
        }
    }
};