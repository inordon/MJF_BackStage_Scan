// js/visitors.js - –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è–º–∏
const visitors = {
    currentPage: 1,
    totalPages: 1,
    events: [],
    filters: {
        search: '',
        status: '',
        event_id: ''
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    async initAddForm() {
        await this.loadEvents();
        this.setupFormHandlers();
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Ñ–æ—Ä–º—ã
    async loadEvents() {
        try {
            console.log('üéØ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π...');
            const response = await fetch('/api/visitors/events/active');
            const data = await response.json();

            if (data.success && data.events) {
                this.events = data.events;
                this.updateEventSelectors();
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${this.events.length}`);
            } else {
                console.warn('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
                this.events = [];
                this.updateEventSelectors();
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', err);
            this.events = [];
            this.updateEventSelectors();
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ —Å–æ–±—ã—Ç–∏–π
    updateEventSelectors() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Å–æ–±—ã—Ç–∏–π (–Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
        const eventFilter = document.getElementById('event-filter');
        if (eventFilter) {
            eventFilter.innerHTML = '<option value="">–í—Å–µ —Å–æ–±—ã—Ç–∏—è</option>';
            this.events.forEach(event => {
                const option = document.createElement('option');
                option.value = event.id;
                option.textContent = `${event.name} (${utils.formatDate(event.start_date)} - ${utils.formatDate(event.end_date)})`;
                eventFilter.appendChild(option);
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –≤ —Ñ–æ—Ä–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ visitors.html)
        const eventSelect = document.getElementById('eventId');
        if (eventSelect) {
            if (this.events.length === 0) {
                eventSelect.innerHTML = '<option value="">‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π</option>';
                eventSelect.disabled = true;
            } else {
                eventSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ</option>';
                this.events.forEach(event => {
                    const option = document.createElement('option');
                    option.value = event.id;
                    option.textContent = event.name;
                    eventSelect.appendChild(option);
                });
                eventSelect.disabled = false;
            }
        }
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
    async loadList(page = 1) {
        try {
            const params = new URLSearchParams({
                page: page,
                limit: 25,
                ...this.filters
            });

            const response = await fetch(`/api/visitors?${params}`);
            const data = await response.json();

            this.displayVisitors(data.visitors);
            this.updatePagination(data.pagination);
            this.updateVisitorsCount(data.pagination.total);

        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π:', err);
            this.displayError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π');
        }
    },

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
    displayVisitors(visitors) {
        const container = document.getElementById('visitors-table');
        if (!container) return;

        if (!visitors || visitors.length === 0) {
            container.innerHTML = '<div class="empty">–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }

        const table = `
            <table>
                <thead>
                    <tr>
                        <th>–§–ò–û</th>
                        <th>–°–æ–±—ã—Ç–∏–µ</th>
                        <th>–®—Ç—Ä–∏—Ö–∫–æ–¥</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</th>
                        <th>–°–æ–∑–¥–∞–Ω</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    ${visitors.map(visitor => `
                        <tr>
                            <td>
                                <strong>${visitor.last_name} ${visitor.first_name}</strong>
                                ${visitor.middle_name ? `<br><small>${visitor.middle_name}</small>` : ''}
                                ${visitor.comment ? `<br><em>${visitor.comment}</em>` : ''}
                            </td>
                            <td>
                                ${visitor.event ? visitor.event.name : '–ë–µ–∑ —Å–æ–±—ã—Ç–∏—è'}
                                ${visitor.event ? `<br><small>${utils.formatDate(visitor.event.start_date)}</small>` : ''}
                            </td>
                            <td>
                                <code>${visitor.barcode}</code>
                                ${visitor.first_scan_today ? '<br><span class="badge">–°–∫–∞–Ω–∏—Ä–æ–≤–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è</span>' : ''}
                            </td>
                            <td>
                                <span class="status-${visitor.status}">${utils.getStatusText(visitor.status)}</span>
                            </td>
                            <td>
                                ${visitor.total_scans} —Ä–∞–∑
                                ${visitor.last_scan ? `<br><small>–ü–æ—Å–ª–µ–¥–Ω–∏–π: ${utils.formatDateTime(visitor.last_scan)}</small>` : ''}
                            </td>
                            <td>
                                ${utils.formatDate(visitor.created_at)}
                                ${visitor.created_by_name ? `<br><small>${visitor.created_by_name}</small>` : ''}
                            </td>
                            <td>
                                <button onclick="visitors.viewQR(${visitor.id})" class="secondary-btn" title="–ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥">
                                    üì±
                                </button>
                                ${auth.hasRole(['admin', 'moderator']) ? `
                                    <button onclick="visitors.editVisitor(${visitor.id})" class="secondary-btn" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                                        ‚úèÔ∏è
                                    </button>
                                    <button onclick="visitors.toggleStatus(${visitor.id}, '${visitor.status}')" 
                                            class="secondary-btn" 
                                            title="${visitor.status === 'active' ? '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'}">
                                        ${visitor.status === 'active' ? 'üö´' : '‚úÖ'}
                                    </button>
                                ` : ''}
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;

        container.innerHTML = table;
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
    updateVisitorsCount(total) {
        const counter = document.getElementById('visitors-count');
        if (counter) {
            counter.textContent = `${total} –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π`;
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    updatePagination(pagination) {
        this.currentPage = pagination.page;
        this.totalPages = pagination.pages;

        utils.renderPagination('visitors-pagination', pagination, 'visitors.loadList');
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ä–º—ã
    setupFormHandlers() {
        const form = document.getElementById('visitor-form');
        if (form) {
            form.addEventListener('submit', this.handleFormSubmit.bind(this));
        }
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    async handleFormSubmit(e) {
        e.preventDefault();

        const submitBtn = e.target.querySelector('button[type="submit"]');
        const btnText = submitBtn.querySelector('.btn-text');
        const btnLoading = submitBtn.querySelector('.btn-loading');

        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            submitBtn.disabled = true;
            btnText.classList.add('hidden');
            btnLoading.classList.remove('hidden');

            const formData = new FormData(e.target);

            const response = await fetch('/api/visitors', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();

            if (response.ok) {
                this.showCreationResult(data.visitor);
                this.resetForm();
                utils.showAlert('success', '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
            } else {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è');
            }

        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è:', err);
            utils.showAlert('error', err.message);
        } finally {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            submitBtn.disabled = false;
            btnText.classList.remove('hidden');
            btnLoading.classList.add('hidden');
        }
    },

    // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    showCreationResult(visitor) {
        const resultContainer = document.getElementById('creation-result');
        const visitorInfo = document.getElementById('visitor-info');

        if (resultContainer && visitorInfo) {
            visitorInfo.innerHTML = `
                <p><strong>–§–ò–û:</strong> ${visitor.last_name} ${visitor.first_name} ${visitor.middle_name || ''}</p>
                <p><strong>–°–æ–±—ã—Ç–∏–µ:</strong> ${visitor.event_name}</p>
                <p><strong>–®—Ç—Ä–∏—Ö–∫–æ–¥:</strong> <code>${visitor.barcode}</code></p>
                ${visitor.comment ? `<p><strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> ${visitor.comment}</p>` : ''}
            `;

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
            this.generateQRCode(visitor.barcode);

            resultContainer.classList.remove('hidden');

            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            resultContainer.scrollIntoView({ behavior: 'smooth' });
        }
    },

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞
    generateQRCode(barcode) {
        const canvas = document.getElementById('qr-canvas');
        if (canvas && window.qrcode) {
            const qr = window.qrcode(4, 'M');
            qr.addData(barcode);
            qr.make();

            const cellSize = 4;
            const margin = 16;
            const size = qr.getModuleCount() * cellSize + margin * 2;

            canvas.width = size;
            canvas.height = size;

            const ctx = canvas.getContext('2d');
            ctx.fillStyle = '#FFFFFF';
            ctx.fillRect(0, 0, size, size);

            ctx.fillStyle = '#000000';
            for (let row = 0; row < qr.getModuleCount(); row++) {
                for (let col = 0; col < qr.getModuleCount(); col++) {
                    if (qr.isDark(row, col)) {
                        ctx.fillRect(
                            col * cellSize + margin,
                            row * cellSize + margin,
                            cellSize,
                            cellSize
                        );
                    }
                }
            }
        }
    },

    // –°–∫–∞—á–∞—Ç—å QR –∫–æ–¥
    downloadQR() {
        const canvas = document.getElementById('qr-canvas');
        if (canvas) {
            const link = document.createElement('a');
            link.download = 'visitor-qr-code.png';
            link.href = canvas.toDataURL();
            link.click();
        }
    },

    // –ü–µ—á–∞—Ç—å QR –∫–æ–¥–∞
    printQR() {
        const canvas = document.getElementById('qr-canvas');
        if (canvas) {
            const dataUrl = canvas.toDataURL();
            const windowContent = `
                <!DOCTYPE html>
                <html>
                <head><title>QR –ö–æ–¥ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è</title></head>
                <body style="text-align: center; padding: 20px;">
                    <h2>QR –ö–æ–¥ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è</h2>
                    <img src="${dataUrl}" style="max-width: 100%;">
                    <script>window.print(); window.close();</script>
                </body>
                </html>
            `;
            const printWindow = window.open('', '', 'width=400,height=400');
            printWindow.document.open();
            printWindow.document.write(windowContent);
            printWindow.document.close();
        }
    },

    // –ü—Ä–æ—Å–º–æ—Ç—Ä QR –∫–æ–¥–∞
    async viewQR(visitorId) {
        try {
            const qrUrl = `/api/visitors/${visitorId}/qr`;
            const modal = `
                <div class="modal">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3>üì± QR-–∫–æ–¥ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è</h3>
                            <button onclick="this.closest('.modal').remove()" class="close-btn">‚úï</button>
                        </div>
                        <div style="text-align: center; padding: 20px;">
                            <img src="${qrUrl}" alt="QR –∫–æ–¥" style="max-width: 256px; border: 1px solid #ddd; border-radius: 8px;">
                            <div style="margin-top: 15px;">
                                <a href="${qrUrl}" download="qr-code.png" class="primary-btn">üì• –°–∫–∞—á–∞—Ç—å</a>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            document.body.insertAdjacentHTML('beforeend', modal);
        } catch (err) {
            utils.showAlert('error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ QR-–∫–æ–¥–∞');
        }
    },

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)
    async editVisitor(visitorId) {
        utils.showAlert('info', '–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
    },

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
    async toggleStatus(visitorId, currentStatus) {
        const newStatus = currentStatus === 'active' ? 'blocked' : 'active';
        const action = newStatus === 'blocked' ? '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å';

        if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ ${action} —ç—Ç–æ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è?`)) {
            return;
        }

        try {
            const response = await fetch(`/api/visitors/${visitorId}/status`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ status: newStatus })
            });

            const data = await response.json();

            if (response.ok) {
                utils.showAlert('success', data.message);
                this.loadList(this.currentPage);
            } else {
                throw new Error(data.error);
            }
        } catch (err) {
            utils.showAlert('error', '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ' + err.message);
        }
    },

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    filter() {
        this.filters.search = document.getElementById('search-input')?.value || '';
        this.filters.status = document.getElementById('status-filter')?.value || '';
        this.filters.event_id = document.getElementById('event-filter')?.value || '';

        this.loadList(1);
    },

    // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
    resetFilters() {
        const searchInput = document.getElementById('search-input');
        const statusFilter = document.getElementById('status-filter');
        const eventFilter = document.getElementById('event-filter');

        if (searchInput) searchInput.value = '';
        if (statusFilter) statusFilter.value = '';
        if (eventFilter) eventFilter.value = '';

        this.filters = { search: '', status: '', event_id: '' };
        this.loadList(1);
    },

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
    generateBarcode() {
        const barcodeInput = document.getElementById('barcode');
        if (barcodeInput) {
            const newBarcode = utils.generateBarcode();
            barcodeInput.value = newBarcode;
        }
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    removePhoto() {
        const photoInput = document.getElementById('photo');
        const preview = document.getElementById('photo-preview');

        if (photoInput) photoInput.value = '';
        if (preview) preview.classList.add('hidden');
    },

    // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
    resetForm() {
        const form = document.getElementById('visitor-form');
        const resultContainer = document.getElementById('creation-result');
        const preview = document.getElementById('photo-preview');

        if (form) form.reset();
        if (resultContainer) resultContainer.classList.add('hidden');
        if (preview) preview.classList.add('hidden');
    },

    // –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
    createAnother() {
        this.resetForm();
        window.scrollTo(0, 0);
    },

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
    displayError(message) {
        const container = document.getElementById('visitors-table');
        if (container) {
            container.innerHTML = `
                <div style="text-align: center; padding: 40px; color: #dc3545;">
                    <h3>‚ùå ${message}</h3>
                    <button onclick="visitors.loadList()" class="primary-btn" style="margin-top: 15px;">
                        üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                </div>
            `;
        }
    }
};