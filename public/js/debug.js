// debug.js - –ú–æ–¥—É–ª—å –æ—Ç–ª–∞–¥–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
// –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–µ

(function(window) {
    'use strict';

    const Debug = {
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        config: {
            enabled: false,
            logLevel: 'info', // 'debug', 'info', 'warn', 'error'
            showInConsole: true,
            showInUI: false
        },

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –æ—Ç–ª–∞–¥–∫–∏
        init(app, config = {}) {
            this.app = app;
            this.config = { ...this.config, ...config };

            if (!this.config.enabled) {
                return;
            }

            this.log('info', 'üõ†Ô∏è –ú–æ–¥—É–ª—å –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω');
            this.createDebugPanel();
            this.setupKeyboardShortcuts();
            this.addTestMethods();
        },

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—Ä–æ–≤–Ω—è–º–∏
        log(level, message, data = null) {
            if (!this.config.showInConsole) return;

            const levels = ['debug', 'info', 'warn', 'error'];
            const currentLevelIndex = levels.indexOf(this.config.logLevel);
            const messageLevelIndex = levels.indexOf(level);

            if (messageLevelIndex >= currentLevelIndex) {
                const prefix = {
                    debug: 'üîç',
                    info: '‚ÑπÔ∏è',
                    warn: '‚ö†Ô∏è',
                    error: '‚ùå'
                }[level];

                console[level === 'debug' ? 'log' : level](`${prefix} [DEBUG]`, message, data || '');
            }
        },

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –æ—Ç–ª–∞–¥–∫–∏ –≤ UI
        createDebugPanel() {
            if (!this.config.showInUI) return;

            const panel = document.createElement('div');
            panel.id = 'debug-panel';
            panel.style.cssText = `
                position: fixed;
                top: 10px;
                right: 10px;
                width: 300px;
                max-height: 400px;
                background: #2d3748;
                color: #e2e8f0;
                border-radius: 8px;
                padding: 15px;
                font-family: 'Courier New', monospace;
                font-size: 12px;
                z-index: 10000;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                overflow-y: auto;
                display: none;
            `;

            panel.innerHTML = `
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                    <strong>üõ†Ô∏è –û—Ç–ª–∞–¥–∫–∞</strong>
                    <button onclick="window.Debug.hidePanel()" style="background: #e53e3e; color: white; border: none; border-radius: 4px; padding: 2px 6px; cursor: pointer;">‚úï</button>
                </div>
                <div id="debug-content"></div>
                <div style="margin-top: 10px; display: flex; gap: 5px; flex-wrap: wrap;">
                    <button onclick="window.Debug.API.testEventsAPI()" style="background: #3182ce; color: white; border: none; border-radius: 4px; padding: 4px 8px; cursor: pointer; font-size: 10px;">Test Events</button>
                    <button onclick="window.Debug.API.diagnose()" style="background: #38a169; color: white; border: none; border-radius: 4px; padding: 4px 8px; cursor: pointer; font-size: 10px;">Diagnose</button>
                    <button onclick="window.Debug.showState()" style="background: #d69e2e; color: white; border: none; border-radius: 4px; padding: 4px 8px; cursor: pointer; font-size: 10px;">State</button>
                </div>
            `;

            document.body.appendChild(panel);
            this.panel = panel;
        },

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        setupKeyboardShortcuts() {
            document.addEventListener('keydown', (e) => {
                // Ctrl+Shift+D - –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏
                if (e.ctrlKey && e.shiftKey && e.key === 'D') {
                    e.preventDefault();
                    this.togglePanel();
                }

                // Ctrl+Shift+T - —Ç–µ—Å—Ç API —Å–æ–±—ã—Ç–∏–π
                if (e.ctrlKey && e.shiftKey && e.key === 'T') {
                    e.preventDefault();
                    this.API.testEventsAPI();
                }

                // Ctrl+Shift+S - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if (e.ctrlKey && e.shiftKey && e.key === 'S') {
                    e.preventDefault();
                    this.showState();
                }
            });
        },

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        addTestMethods() {
            if (!this.app || !this.app.visitors) return;

            // –î–æ–±–∞–≤–ª—è–µ–º testEventsAPI –≤ visitors –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (!this.app.visitors.testEventsAPI) {
                this.app.visitors.testEventsAPI = () => this.API.testEventsAPI();
            }

            this.log('info', '‚úÖ –ú–µ—Ç–æ–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
        },

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª—å—é
        showPanel() {
            if (this.panel) {
                this.panel.style.display = 'block';
            }
        },

        hidePanel() {
            if (this.panel) {
                this.panel.style.display = 'none';
            }
        },

        togglePanel() {
            if (!this.panel) {
                this.createDebugPanel();
            }

            if (this.panel.style.display === 'none') {
                this.showPanel();
            } else {
                this.hidePanel();
            }
        },

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–Ω–µ–ª—å
        addToPanel(message) {
            if (!this.panel) return;

            const content = this.panel.querySelector('#debug-content');
            if (content) {
                const line = document.createElement('div');
                line.style.marginBottom = '5px';
                line.innerHTML = `<span style="color: #a0aec0">${new Date().toLocaleTimeString()}</span> ${message}`;
                content.appendChild(line);

                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                if (content.children.length > 50) {
                    content.removeChild(content.firstChild);
                }

                content.scrollTop = content.scrollHeight;
            }
        },

        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        showState() {
            if (!this.app) {
                this.log('error', '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            const state = {
                currentUser: this.app.state?.currentUser,
                visitorsCount: this.app.state?.visitors?.length || 0,
                eventsCount: this.app.state?.events?.length || 0,
                usersCount: this.app.state?.users?.length || 0,
                pagination: this.app.state?.pagination
            };

            this.log('info', 'üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', state);

            if (this.config.showInUI) {
                this.addToPanel(`üìä <strong>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</strong> ${JSON.stringify(state, null, 2)}`);
            }
        },

        // API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        API: {
            // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å–æ–±—ã—Ç–∏–π (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ index.html)
            async testEventsAPI() {
                Debug.log('info', 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —Å–æ–±—ã—Ç–∏–π...');

                if (Debug.config.showInUI) {
                    Debug.addToPanel('üß™ <strong>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å–æ–±—ã—Ç–∏–π...</strong>');
                }

                // –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω–æ–π endpoint —Å–æ–±—ã—Ç–∏–π
                Debug.log('info', 'üì° –¢–µ—Å—Ç 1: /api/events');
                try {
                    const response = await fetch('/api/events');
                    Debug.log('info', `üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ /api/events: ${response.status} ${response.statusText}`);

                    const data = await response.json();
                    Debug.log('info', 'üìä –û—Ç–≤–µ—Ç /api/events:', data);

                    if (data.events) {
                        Debug.log('info', `üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: ${data.events.length}`);
                        const activeEvents = data.events.filter(e => e.status === 'active');
                        Debug.log('info', `üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: ${activeEvents.length}`);

                        activeEvents.forEach((event, i) => {
                            Debug.log('debug', `  ${i + 1}. ${event.name} (ID: ${event.id}, –¥–æ: ${event.end_date})`);
                        });

                        if (Debug.config.showInUI) {
                            Debug.addToPanel(`‚úÖ /api/events: ${data.events.length} —Å–æ–±—ã—Ç–∏–π`);
                        }
                    } else {
                        Debug.log('warn', '‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—è events –≤ –æ—Ç–≤–µ—Ç–µ /api/events');
                        if (Debug.config.showInUI) {
                            Debug.addToPanel('‚ö†Ô∏è /api/events: –Ω–µ—Ç –ø–æ–ª—è events');
                        }
                    }
                } catch (err) {
                    Debug.log('error', '‚ùå –û—à–∏–±–∫–∞ /api/events:', err);
                    if (Debug.config.showInUI) {
                        Debug.addToPanel(`‚ùå /api/events: ${err.message}`);
                    }
                }

                // –¢–µ—Å—Ç 2: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint
                Debug.log('info', 'üì° –¢–µ—Å—Ç 2: /api/visitors/events/active');
                try {
                    const response = await fetch('/api/visitors/events/active');
                    Debug.log('info', `üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ /api/visitors/events/active: ${response.status} ${response.statusText}`);

                    const text = await response.text();
                    Debug.log('debug', 'üìä –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç /api/visitors/events/active:', text);

                    const data = JSON.parse(text);
                    Debug.log('info', 'üìä –ü–∞—Ä—Å–∏–Ω–≥ JSON —É—Å–ø–µ—à–µ–Ω:', data);

                    if (Debug.config.showInUI) {
                        Debug.addToPanel(`‚úÖ /api/visitors/events/active: OK`);
                    }
                } catch (err) {
                    Debug.log('error', '‚ùå –û—à–∏–±–∫–∞ /api/visitors/events/active:', err);
                    if (Debug.config.showInUI) {
                        Debug.addToPanel(`‚ùå /api/visitors/events/active: ${err.message}`);
                    }
                }

                // –¢–µ—Å—Ç 3: –°–æ—Å—Ç–æ—è–Ω–∏–µ DOM
                Debug.log('info', 'üì° –¢–µ—Å—Ç 3: –°–æ—Å—Ç–æ—è–Ω–∏–µ DOM');
                const filter = document.getElementById('event-filter');
                if (filter) {
                    Debug.log('info', `üìä –§–∏–ª—å—Ç—Ä –Ω–∞–π–¥–µ–Ω, –æ–ø—Ü–∏–π: ${filter.options.length}`);
                    for (let i = 0; i < Math.min(filter.options.length, 5); i++) {
                        Debug.log('debug', `  ${i}: "${filter.options[i].text}" (value: "${filter.options[i].value}")`);
                    }

                    if (Debug.config.showInUI) {
                        Debug.addToPanel(`üìã –§–∏–ª—å—Ç—Ä: ${filter.options.length} –æ–ø—Ü–∏–π`);
                    }
                } else {
                    Debug.log('error', '‚ùå –§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM');
                    if (Debug.config.showInUI) {
                        Debug.addToPanel('‚ùå –§–∏–ª—å—Ç—Ä —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    }
                }

                // –¢–µ—Å—Ç 4: –§–æ—Ä–º–∞
                const formSelect = document.querySelector('#visitor-form select[name="eventId"]');
                if (formSelect) {
                    Debug.log('info', `üìä –§–æ—Ä–º–∞ –Ω–∞–π–¥–µ–Ω–∞, –æ–ø—Ü–∏–π: ${formSelect.options.length}`);
                    for (let i = 0; i < Math.min(formSelect.options.length, 3); i++) {
                        Debug.log('debug', `  –§–æ—Ä–º–∞ ${i}: "${formSelect.options[i].text}" (value: "${formSelect.options[i].value}")`);
                    }

                    if (Debug.config.showInUI) {
                        Debug.addToPanel(`üìù –§–æ—Ä–º–∞: ${formSelect.options.length} –æ–ø—Ü–∏–π`);
                    }
                } else {
                    Debug.log('error', '‚ùå –§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM');
                    if (Debug.config.showInUI) {
                        Debug.addToPanel('‚ùå –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                    }
                }

                Debug.log('info', '‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

                if (Debug.app && Debug.app.showAlert) {
                    Debug.app.showAlert('info', '–¢–µ—Å—Ç API –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
                }
            },

            // –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
            async diagnose() {
                Debug.log('info', 'üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...');

                if (Debug.config.showInUI) {
                    Debug.addToPanel('üîç <strong>–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞...</strong>');
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints
                const apiTests = [
                    { name: '–°–æ–±—ã—Ç–∏—è (–æ—Å–Ω–æ–≤–Ω–æ–π)', url: '/api/events' },
                    { name: '–°–æ–±—ã—Ç–∏—è (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π)', url: '/api/visitors/events/active' },
                    { name: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', url: '/api/auth/check' },
                    { name: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', url: '/api/visitors/stats/overview' }
                ];

                for (const test of apiTests) {
                    try {
                        const res = await fetch(test.url);
                        const data = await res.json();
                        Debug.log('info', `‚úÖ ${test.name}: ${res.status}`, data);

                        if (Debug.config.showInUI) {
                            Debug.addToPanel(`‚úÖ ${test.name}: ${res.status}`);
                        }
                    } catch (err) {
                        Debug.log('error', `‚ùå ${test.name}: ${err.message}`);

                        if (Debug.config.showInUI) {
                            Debug.addToPanel(`‚ùå ${test.name}: –æ—à–∏–±–∫–∞`);
                        }
                    }
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
                const elements = [
                    'event-filter',
                    'visitor-form',
                    'events-list',
                    'visitors-table',
                    'stats-overview'
                ];

                elements.forEach(id => {
                    const el = document.getElementById(id);
                    const status = el ? '‚úÖ' : '‚ùå';
                    const message = el ? '–Ω–∞–π–¥–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
                    Debug.log('info', `${status} –≠–ª–µ–º–µ–Ω—Ç #${id}: ${message}`);

                    if (Debug.config.showInUI) {
                        Debug.addToPanel(`${status} #${id}: ${message}`);
                    }
                });

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                if (Debug.app && Debug.app.state) {
                    const state = Debug.app.state;
                    Debug.log('info', 'üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:');
                    Debug.log('info', `- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${state.currentUser?.username || '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}`);
                    Debug.log('info', `- –°–æ–±—ã—Ç–∏—è: ${state.events?.length || 0}`);
                    Debug.log('info', `- –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏: ${state.visitors?.length || 0}`);

                    if (Debug.config.showInUI) {
                        Debug.addToPanel(`üìä –î–∞–Ω–Ω—ã–µ: ${state.events?.length || 0} —Å–æ–±—ã—Ç–∏–π, ${state.visitors?.length || 0} –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π`);
                    }
                }

                Debug.log('info', '‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            },

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
            async forceUpdateFilter() {
                Debug.log('info', 'üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞...');

                const filter = document.getElementById('event-filter');
                if (!filter) {
                    Debug.log('error', '‚ùå –§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    return;
                }

                filter.innerHTML = '<option value="">üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...</option>';

                try {
                    if (Debug.app && Debug.app.events && Debug.app.events.loadActiveForFilters) {
                        await Debug.app.events.loadActiveForFilters();
                        Debug.log('info', '‚úÖ –§–∏–ª—å—Ç—Ä –æ–±–Ω–æ–≤–ª–µ–Ω');
                    } else {
                        Debug.log('error', '‚ùå –ú–µ—Ç–æ–¥ loadActiveForFilters –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    }
                } catch (err) {
                    Debug.log('error', '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', err);
                    filter.innerHTML = '<option value="">‚ùå –û—à–∏–±–∫–∞</option>';
                }
            },

            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
            async createTestEvents() {
                if (!Debug.app || !Debug.app.events || !Debug.app.events.createTestEventsIfNeeded) {
                    Debug.log('error', '‚ùå –ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    return;
                }

                try {
                    await Debug.app.events.createTestEventsIfNeeded();
                    Debug.log('info', '‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω—ã');
                } catch (err) {
                    Debug.log('error', '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π:', err);
                }
            }
        },

        // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–µ—Ä—Ñ–æ—Ä–º–∞–Ω—Å–∞
        Performance: {
            startTimer(name) {
                performance.mark(`${name}-start`);
            },

            endTimer(name) {
                performance.mark(`${name}-end`);
                performance.measure(name, `${name}-start`, `${name}-end`);
                const measure = performance.getEntriesByName(name)[0];
                Debug.log('info', `‚è±Ô∏è ${name}: ${measure.duration.toFixed(2)}ms`);
                return measure.duration;
            },

            measureFunction(fn, name) {
                return function(...args) {
                    Debug.Performance.startTimer(name);
                    const result = fn.apply(this, args);
                    Debug.Performance.endTimer(name);
                    return result;
                };
            }
        }
    };

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
    window.Debug = Debug;

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    if (window.DEBUG_CONFIG) {
        window.addEventListener('DOMContentLoaded', () => {
            Debug.init(window.app, window.DEBUG_CONFIG);
        });
    }

    Debug.log('info', 'üõ†Ô∏è –ú–æ–¥—É–ª—å –æ—Ç–ª–∞–¥–∫–∏ –≥–æ—Ç–æ–≤ –∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');

})(window);