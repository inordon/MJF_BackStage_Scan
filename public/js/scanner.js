// js/scanner.js - –ú–æ–¥—É–ª—å QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
const scanner = {
    qrScanner: null,
    isScanning: false,
    recentScans: [],
    cameras: [],
    currentCameraIndex: 0,

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–∞
    async init() {
        this.setupEventListeners();
        await this.loadRecentScans();
        this.checkCameraSupport();
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–º–µ—Ä—ã
    async checkCameraSupport() {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            this.showError('–ö–∞–º–µ—Ä–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
            return false;
        }

        try {
            const devices = await navigator.mediaDevices.enumerateDevices();
            this.cameras = devices.filter(device => device.kind === 'videoinput');

            if (this.cameras.length === 0) {
                this.showError('–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return false;
            }

            console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä: ${this.cameras.length}`);
            return true;
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–º–µ—Ä:', err);
            this.showError('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ');
            return false;
        }
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        const manualForm = document.getElementById('manual-scan-form');
        if (manualForm) {
            manualForm.addEventListener('submit', this.handleManualScan.bind(this));
        }
    },

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∫–∞–Ω–µ—Ä–∞
    async toggle() {
        if (this.isScanning) {
            this.stopScanner();
        } else {
            await this.startScanner();
        }
    },

    // –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞
    async startScanner() {
        try {
            if (!await this.checkCameraSupport()) {
                return;
            }

            const video = document.getElementById('qr-video');
            const btn = document.getElementById('scanner-btn');

            if (!video || !btn) {
                this.showError('–≠–ª–µ–º–µ–Ω—Ç—ã —Å–∫–∞–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return;
            }

            console.log('–ó–∞–ø—É—Å–∫ QR —Å–∫–∞–Ω–µ—Ä–∞...');

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã
            const constraints = {
                video: {
                    facingMode: 'environment', // –ó–∞–¥–Ω—è—è –∫–∞–º–µ—Ä–∞
                    width: { ideal: 640 },
                    height: { ideal: 480 }
                }
            };

            // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é
            if (this.cameras.length > 0 && this.cameras[this.currentCameraIndex]) {
                constraints.video.deviceId = this.cameras[this.currentCameraIndex].deviceId;
            }

            const stream = await navigator.mediaDevices.getUserMedia(constraints);
            video.srcObject = stream;
            video.classList.remove('hidden');

            await video.play();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º QR —Å–∫–∞–Ω–µ—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (window.QrScanner) {
                this.qrScanner = new QrScanner(
                    video,
                    this.handleScanResult.bind(this),
                    {
                        highlightScanRegion: true,
                        highlightCodeOutline: true,
                        maxScansPerSecond: 2
                    }
                );
                await this.qrScanner.start();
            } else {
                // Fallback - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä—É—á–Ω—É—é
                console.warn('QrScanner –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                this.startManualScanning(video);
            }

            this.isScanning = true;
            btn.textContent = '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∞–Ω–µ—Ä';
            btn.classList.remove('primary-btn');
            btn.classList.add('secondary-btn');

            console.log('‚úÖ QR —Å–∫–∞–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω');

        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞:', err);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É: ' + err.message);
        }
    },

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞
    stopScanner() {
        const video = document.getElementById('qr-video');
        const btn = document.getElementById('scanner-btn');

        if (this.qrScanner) {
            this.qrScanner.stop();
            this.qrScanner.destroy();
            this.qrScanner = null;
        }

        if (video) {
            const stream = video.srcObject;
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
            }
            video.srcObject = null;
            video.classList.add('hidden');
        }

        this.isScanning = false;

        if (btn) {
            btn.textContent = 'üìπ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–µ—Ä';
            btn.classList.remove('secondary-btn');
            btn.classList.add('primary-btn');
        }

        console.log('‚èπÔ∏è QR —Å–∫–∞–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    },

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
    async switchCamera() {
        if (!this.isScanning || this.cameras.length <= 1) {
            return;
        }

        this.currentCameraIndex = (this.currentCameraIndex + 1) % this.cameras.length;

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–µ—Ä —Å –Ω–æ–≤–æ–π –∫–∞–º–µ—Ä–æ–π
        this.stopScanner();
        await this.startScanner();

        utils.showAlert('info', `–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –∫–∞–º–µ—Ä—É ${this.currentCameraIndex + 1} –∏–∑ ${this.cameras.length}`);
    },

    // –ü—Ä–æ—Å—Ç–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ QrScanner –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    startManualScanning(video) {
        utils.showAlert('warning', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞.');
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    async handleScanResult(result) {
        if (!result) return;

        const barcode = result.data || result;
        console.log('üîç –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω —à—Ç—Ä–∏—Ö–∫–æ–¥:', barcode);

        try {
            // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            if (this.qrScanner) {
                this.qrScanner.stop();
            }

            await this.processScan(barcode);

            // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                if (this.isScanning && this.qrScanner) {
                    this.qrScanner.start();
                }
            }, 2000);

        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
            utils.showAlert('error', '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞');

            // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            setTimeout(() => {
                if (this.isScanning && this.qrScanner) {
                    this.qrScanner.start();
                }
            }, 1000);
        }
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    async handleManualScan(e) {
        e.preventDefault();

        const barcodeInput = document.getElementById('manual-barcode');
        const barcode = barcodeInput.value.trim();

        if (!barcode) {
            utils.showAlert('warning', '–í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö–∫–æ–¥');
            return;
        }

        console.log('‚úèÔ∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞:', barcode);

        try {
            await this.processScan(barcode);
            barcodeInput.value = '';
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
            utils.showAlert('error', '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞');
        }
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    async processScan(barcode) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±—ã–ª –ª–∏ —ç—Ç–æ—Ç —à—Ç—Ä–∏—Ö–∫–æ–¥ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–µ–¥–∞–≤–Ω–æ (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
            const recentScan = this.recentScans.find(scan =>
                scan.barcode === barcode &&
                Date.now() - scan.timestamp < 30000 // 30 —Å–µ–∫—É–Ω–¥
            );

            if (recentScan) {
                utils.showAlert('warning', '–≠—Ç–æ—Ç —à—Ç—Ä–∏—Ö–∫–æ–¥ –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω');
                return;
            }

            console.log(`üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞: ${barcode}`);

            const response = await fetch(`/api/scan/${barcode}`);
            const result = await response.json();

            console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', result);

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            this.addToRecentScans({
                barcode: barcode,
                timestamp: Date.now(),
                result: result
            });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.displayScanResult(result);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            this.updateRecentScansDisplay();

        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', err);

            const errorResult = {
                status: 'error',
                type: 'system_error',
                icon: '‚ÑπÔ∏è',
                title: '–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã',
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥',
                barcode: barcode
            };

            this.displayScanResult(errorResult);
        }
    },

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    displayScanResult(result) {
        const container = document.getElementById('scan-result');
        if (!container) return;

        const timestamp = new Date().toLocaleTimeString('ru-RU');

        let content = '';
        let alertType = 'info';

        switch (result.status) {
            case 'success':
                alertType = 'success';
                content = `
                    <div class="scan-success">
                        <div style="font-size: 3em; margin-bottom: 15px;">‚úÖ</div>
                        <h2>${result.title}</h2>
                        ${result.comment ? `<p style="font-style: italic; margin: 10px 0;">"${result.comment}"</p>` : ''}
                        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 15px 0;">
                            <strong>–®—Ç—Ä–∏—Ö–∫–æ–¥:</strong> <code>${result.barcode}</code><br>
                            <strong>–í—Ä–µ–º—è:</strong> ${timestamp}<br>
                            <strong>–°—Ç–∞—Ç—É—Å:</strong> ${result.message}
                        </div>
                    </div>
                `;
                break;

            case 'warning':
                alertType = 'warning';
                content = `
                    <div class="scan-warning">
                        <div style="font-size: 3em; margin-bottom: 15px;">‚ö†Ô∏è</div>
                        <h2>${result.title}</h2>
                        ${result.comment ? `<p style="font-style: italic; margin: 10px 0;">"${result.comment}"</p>` : ''}
                        <div style="background: #fff3cd; padding: 15px; border-radius: 8px; margin: 15px 0;">
                            <strong>–®—Ç—Ä–∏—Ö–∫–æ–¥:</strong> <code>${result.barcode}</code><br>
                            <strong>–í—Ä–µ–º—è:</strong> ${timestamp}<br>
                            <strong>–ü–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> ${result.firstScanTime ? new Date(result.firstScanTime).toLocaleString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}<br>
                            <strong>–°—Ç–∞—Ç—É—Å:</strong> ${result.message}
                        </div>
                    </div>
                `;
                break;

            case 'error':
                alertType = 'error';
                content = `
                    <div class="scan-error">
                        <div style="font-size: 3em; margin-bottom: 15px;">‚ùå</div>
                        <h2>${result.title || '–ü–†–û–•–û–î –ó–ê–ü–†–ï–©–ï–ù'}</h2>
                        <div style="background: #f8d7da; padding: 15px; border-radius: 8px; margin: 15px 0;">
                            <strong>–®—Ç—Ä–∏—Ö–∫–æ–¥:</strong> <code>${result.barcode}</code><br>
                            <strong>–í—Ä–µ–º—è:</strong> ${timestamp}<br>
                            <strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> ${result.message}<br>
                            <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É
                        </div>
                    </div>
                `;
                break;

            default:
                content = `
                    <div class="scan-info">
                        <div style="font-size: 3em; margin-bottom: 15px;">‚ÑπÔ∏è</div>
                        <h2>${result.title || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'}</h2>
                        <div style="background: #d1ecf1; padding: 15px; border-radius: 8px; margin: 15px 0;">
                            <strong>–®—Ç—Ä–∏—Ö–∫–æ–¥:</strong> <code>${result.barcode}</code><br>
                            <strong>–í—Ä–µ–º—è:</strong> ${timestamp}<br>
                            <strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${result.message}
                        </div>
                    </div>
                `;
        }

        container.innerHTML = content;
        container.classList.remove('hidden');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        utils.showAlert(alertType, result.message || '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            container.classList.add('hidden');
        }, 10000);
    },

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    addToRecentScans(scan) {
        this.recentScans.unshift(scan);

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        if (this.recentScans.length > 10) {
            this.recentScans = this.recentScans.slice(0, 10);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        try {
            localStorage.setItem('recentScans', JSON.stringify(this.recentScans));
        } catch (err) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', err);
        }
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    async loadRecentScans() {
        try {
            const saved = localStorage.getItem('recentScans');
            if (saved) {
                this.recentScans = JSON.parse(saved);
            }
        } catch (err) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', err);
            this.recentScans = [];
        }

        this.updateRecentScansDisplay();
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    updateRecentScansDisplay() {
        const container = document.getElementById('recent-scans');
        if (!container) return;

        if (this.recentScans.length === 0) {
            container.innerHTML = '<div class="empty">–ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø—É—Å—Ç–∞</div>';
            return;
        }

        const scansHtml = this.recentScans.slice(0, 5).map(scan => {
            const time = new Date(scan.timestamp).toLocaleTimeString('ru-RU');
            const result = scan.result;

            let statusIcon = 'üì±';
            let statusClass = 'info';

            if (result.status === 'success') {
                statusIcon = '‚úÖ';
                statusClass = 'success';
            } else if (result.status === 'warning') {
                statusIcon = '‚ö†Ô∏è';
                statusClass = 'warning';
            } else if (result.status === 'error') {
                statusIcon = '‚ùå';
                statusClass = 'error';
            }

            return `
                <div class="activity-item">
                    <div class="activity-icon">${statusIcon}</div>
                    <div class="activity-details">
                        <div class="activity-text">
                            <strong>${result.title || scan.barcode}</strong>
                        </div>
                        <div class="activity-time">
                            ${time} ‚Ä¢ ${result.message || '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'}
                        </div>
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = `
            <div class="activity-list">
                ${scansHtml}
                ${this.recentScans.length > 5 ? `
                    <div style="text-align: center; margin-top: 15px;">
                        <small>–ò –µ—â–µ ${this.recentScans.length - 5} —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...</small>
                    </div>
                ` : ''}
            </div>
        `;
    },

    // –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
    showError(message) {
        const container = document.getElementById('scan-result');
        if (container) {
            container.innerHTML = `
                <div class="scan-error" style="text-align: center; padding: 30px;">
                    <div style="font-size: 3em; margin-bottom: 15px;">‚ö†Ô∏è</div>
                    <h3>${message}</h3>
                    <p style="margin-top: 15px; color: #666;">
                        –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
                    </p>
                </div>
            `;
            container.classList.remove('hidden');
        }

        utils.showAlert('error', message);
    },

    // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    clearHistory() {
        this.recentScans = [];
        try {
            localStorage.removeItem('recentScans');
        } catch (err) {
            console.warn('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', err);
        }
        this.updateRecentScansDisplay();
        utils.showAlert('success', '–ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –æ—á–∏—â–µ–Ω–∞');
    }
};