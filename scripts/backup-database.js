// scripts/backup-database.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 5432,
    database: process.env.DB_NAME || 'visitor_system',
    user: process.env.DB_USER || 'visitor_admin',
    password: process.env.DB_PASSWORD || 'secure_password_123'
};

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤
function ensureBackupDirectory() {
    const backupDir = path.join(__dirname, '..', 'backups');
    if (!fs.existsSync(backupDir)) {
        fs.mkdirSync(backupDir, { recursive: true });
        console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –±—ç–∫–∞–ø–æ–≤: ${backupDir}`);
    }
    return backupDir;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞
function generateBackupFilename(type = 'full') {
    const now = new Date();
    const timestamp = now.toISOString()
        .replace(/[:.]/g, '-')
        .replace('T', '_')
        .split('.')[0]; // —É–±–∏—Ä–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã

    return `visitor_system_${type}_${timestamp}.sql`;
}

// –°–æ–∑–¥–∞–Ω–∏–µ SQL –¥–∞–º–ø–∞ —Å –ø–æ–º–æ—â—å—é pg_dump
async function createSQLDump(outputPath, options = {}) {
    return new Promise((resolve, reject) => {
        const args = [
            '-h', dbConfig.host,
            '-p', dbConfig.port.toString(),
            '-U', dbConfig.user,
            '-d', dbConfig.database,
            '-f', outputPath,
            '--verbose'
        ];

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        if (options.dataOnly) {
            args.push('--data-only');
        }

        if (options.schemaOnly) {
            args.push('--schema-only');
        }

        if (options.clean) {
            args.push('--clean');
        }

        if (options.ifExists) {
            args.push('--if-exists');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º CREATE DATABASE –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if (!options.dataOnly) {
            args.push('--create');
        }

        console.log(`üîÑ –ó–∞–ø—É—Å–∫ pg_dump —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: ${args.join(' ')}`);

        const pgDump = spawn('pg_dump', args, {
            env: {
                ...process.env,
                PGPASSWORD: dbConfig.password
            }
        });

        let errorOutput = '';

        pgDump.stderr.on('data', (data) => {
            const output = data.toString();
            // pg_dump –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ stderr, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            if (output.includes('ERROR') || output.includes('FATAL')) {
                errorOutput += output;
            }
            process.stdout.write(output);
        });

        pgDump.on('close', (code) => {
            if (code === 0) {
                resolve(outputPath);
            } else {
                reject(new Error(`pg_dump –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}. –û—à–∏–±–∫–∏: ${errorOutput}`));
            }
        });

        pgDump.on('error', (err) => {
            if (err.code === 'ENOENT') {
                reject(new Error('pg_dump –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∫–ª–∏–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH'));
            } else {
                reject(err);
            }
        });
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —á–µ—Ä–µ–∑ JavaScript (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)
async function createJSBackup(outputPath) {
    const pool = new Pool(dbConfig);

    try {
        console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        const tablesResult = await pool.query(`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name
        `);

        const tables = tablesResult.rows.map(row => row.table_name);
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tables.length}`);

        let backupContent = [];

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±—ç–∫–∞–ø–∞
        backupContent.push(`-- –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö visitor_system`);
        backupContent.push(`-- –°–æ–∑–¥–∞–Ω: ${new Date().toLocaleString('ru-RU')}`);
        backupContent.push(`-- –í–µ—Ä—Å–∏—è PostgreSQL: ${(await pool.query('SELECT version()')).rows[0].version}`);
        backupContent.push('-- ');
        backupContent.push('');

        // –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        backupContent.push('SET statement_timeout = 0;');
        backupContent.push('SET lock_timeout = 0;');
        backupContent.push('SET client_encoding = \'UTF8\';');
        backupContent.push('SET standard_conforming_strings = on;');
        backupContent.push('');

        // –î–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –¥–∞–Ω–Ω—ã–µ
        for (const tableName of tables) {
            console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: ${tableName}`);

            // –ü–æ–ª—É—á–∞–µ–º CREATE TABLE statement
            const createTableResult = await pool.query(`
                SELECT 
                    'CREATE TABLE ' || table_name || ' (' ||
                    string_agg(
                        column_name || ' ' || 
                        CASE 
                            WHEN data_type = 'character varying' THEN 'VARCHAR(' || character_maximum_length || ')'
                            WHEN data_type = 'character' THEN 'CHAR(' || character_maximum_length || ')'
                            WHEN data_type = 'numeric' THEN 'NUMERIC(' || numeric_precision || ',' || numeric_scale || ')'
                            ELSE UPPER(data_type)
                        END ||
                        CASE WHEN is_nullable = 'NO' THEN ' NOT NULL' ELSE '' END,
                        ', '
                    ) || ');' as create_statement
                FROM information_schema.columns 
                WHERE table_name = $1 
                GROUP BY table_name
            `, [tableName]);

            if (createTableResult.rows.length > 0) {
                backupContent.push(`-- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã ${tableName}`);
                backupContent.push(`DROP TABLE IF EXISTS ${tableName} CASCADE;`);
                backupContent.push(createTableResult.rows[0].create_statement);
                backupContent.push('');
            }

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            const dataResult = await pool.query(`SELECT * FROM ${tableName}`);

            if (dataResult.rows.length > 0) {
                backupContent.push(`-- –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã ${tableName}`);

                // –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
                const columns = Object.keys(dataResult.rows[0]);

                for (const row of dataResult.rows) {
                    const values = columns.map(col => {
                        const value = row[col];
                        if (value === null) return 'NULL';
                        if (typeof value === 'string') return `'${value.replace(/'/g, "''")}'`;
                        if (value instanceof Date) return `'${value.toISOString()}'`;
                        if (typeof value === 'boolean') return value ? 'true' : 'false';
                        return value;
                    });

                    backupContent.push(
                        `INSERT INTO ${tableName} (${columns.join(', ')}) VALUES (${values.join(', ')});`
                    );
                }

                backupContent.push('');
            }
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        backupContent.push('-- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π');
        for (const tableName of tables) {
            const sequenceResult = await pool.query(`
                SELECT column_name, column_default
                FROM information_schema.columns 
                WHERE table_name = $1 
                  AND column_default LIKE 'nextval%'
            `, [tableName]);

            for (const seqRow of sequenceResult.rows) {
                const maxResult = await pool.query(`SELECT MAX(${seqRow.column_name}) as max_val FROM ${tableName}`);
                const maxVal = maxResult.rows[0].max_val || 0;

                if (maxVal > 0) {
                    const sequenceName = seqRow.column_default.match(/'([^']+)'/)?.[1];
                    if (sequenceName) {
                        backupContent.push(`SELECT setval('${sequenceName}', ${maxVal + 1});`);
                    }
                }
            }
        }

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –±—ç–∫–∞–ø –≤ —Ñ–∞–π–ª
        fs.writeFileSync(outputPath, backupContent.join('\n'), 'utf8');

        console.log(`‚úÖ JavaScript –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${outputPath}`);

    } finally {
        await pool.end();
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function getDatabaseStats() {
    const pool = new Pool(dbConfig);

    try {
        console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');

        // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        const dbInfoResult = await pool.query(`
            SELECT 
                current_database() as database_name,
                current_user as current_user,
                version() as version
        `);

        const dbInfo = dbInfoResult.rows[0];
        console.log(`   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbInfo.database_name}`);
        console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${dbInfo.current_user}`);
        console.log(`   –í–µ—Ä—Å–∏—è: ${dbInfo.version.split(' ')[0]} ${dbInfo.version.split(' ')[1]}`);

        // –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const sizeResult = await pool.query(`
            SELECT pg_size_pretty(pg_database_size(current_database())) as database_size
        `);
        console.log(`   –†–∞–∑–º–µ—Ä: ${sizeResult.rows[0].database_size}`);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü
        const tablesStatsResult = await pool.query(`
            SELECT 
                schemaname,
                tablename,
                (SELECT COUNT(*) FROM information_schema.columns WHERE table_name = tablename) as columns_count,
                n_tup_ins as inserts,
                n_tup_upd as updates,
                n_tup_del as deletes
            FROM pg_stat_user_tables 
            ORDER BY tablename
        `);

        console.log('\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü:');
        for (const table of tablesStatsResult.rows) {
            console.log(`   ${table.tablename}: ${table.columns_count} –∫–æ–ª–æ–Ω–æ–∫, ` +
                `${table.inserts} –≤—Å—Ç–∞–≤–æ–∫, ${table.updates} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, ${table.deletes} —É–¥–∞–ª–µ–Ω–∏–π`);
        }

        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        const recordsResult = await pool.query(`
            SELECT 
                'users' as table_name, COUNT(*) as count FROM users
            UNION ALL
            SELECT 'visitors', COUNT(*) FROM visitors
            UNION ALL
            SELECT 'scans', COUNT(*) FROM scans
            UNION ALL
            SELECT 'user_sessions', COUNT(*) FROM user_sessions
        `);

        console.log('\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:');
        for (const record of recordsResult.rows) {
            console.log(`   ${record.table_name}: ${record.count} –∑–∞–ø–∏—Å–µ–π`);
        }

    } finally {
        await pool.end();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
async function createFullBackup() {
    console.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    console.log('=' .repeat(50));

    const backupDir = ensureBackupDirectory();
    const filename = generateBackupFilename('full');
    const outputPath = path.join(backupDir, filename);

    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –±—ç–∫–∞–ø–æ–º
        await getDatabaseStats();

        console.log('\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...');

        // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pg_dump, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –º–µ—Ç–æ–¥
        try {
            await createSQLDump(outputPath, {
                clean: true,
                ifExists: true
            });
            console.log(`‚úÖ SQL –¥–∞–º–ø —Å–æ–∑–¥–∞–Ω: ${filename}`);
        } catch (err) {
            console.log(`‚ö†Ô∏è  pg_dump –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –º–µ—Ç–æ–¥: ${err.message}`);
            await createJSBackup(outputPath);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        const stats = fs.statSync(outputPath);
        const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(2);

        console.log(`\nüéâ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`);
        console.log(`   –§–∞–π–ª: ${outputPath}`);
        console.log(`   –†–∞–∑–º–µ—Ä: ${fileSizeInMB} MB`);
        console.log(`   –°–æ–∑–¥–∞–Ω: ${new Date().toLocaleString('ru-RU')}`);

        return outputPath;

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞:', err.message);
        throw err;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö
async function createDataBackup() {
    console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)');

    const backupDir = ensureBackupDirectory();
    const filename = generateBackupFilename('data');
    const outputPath = path.join(backupDir, filename);

    try {
        await createSQLDump(outputPath, {
            dataOnly: true
        });

        const stats = fs.statSync(outputPath);
        const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(2);

        console.log(`‚úÖ –ë—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω: ${filename} (${fileSizeInMB} MB)`);
        return outputPath;

    } catch (err) {
        console.log(`‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –º–µ—Ç–æ–¥: ${err.message}`);
        await createJSBackup(outputPath);
        return outputPath;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
async function createSchemaBackup() {
    console.log('üèóÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–±–µ–∑ –¥–∞–Ω–Ω—ã—Ö)');

    const backupDir = ensureBackupDirectory();
    const filename = generateBackupFilename('schema');
    const outputPath = path.join(backupDir, filename);

    try {
        await createSQLDump(outputPath, {
            schemaOnly: true
        });

        const stats = fs.statSync(outputPath);
        const fileSizeInKB = (stats.size / 1024).toFixed(2);

        console.log(`‚úÖ –ë—ç–∫–∞–ø —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω: ${filename} (${fileSizeInKB} KB)`);
        return outputPath;

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', err.message);
        throw err;
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const args = process.argv.slice(2);
    const backupType = args[0] || 'full';

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const pool = new Pool(dbConfig);
        await pool.query('SELECT 1');
        await pool.end();

        switch (backupType) {
            case 'full':
                await createFullBackup();
                break;
            case 'data':
                await createDataBackup();
                break;
            case 'schema':
                await createSchemaBackup();
                break;
            default:
                console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±—ç–∫–∞–ø–∞');
                console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node backup-database.js [full|data|schema]');
                console.log('   full   - –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)');
                console.log('   data   - —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ');
                console.log('   schema - —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞');
                process.exit(1);
        }

    } catch (err) {
        if (err.code === 'ECONNREFUSED') {
            console.error('‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            console.error('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
        }
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main();
}

module.exports = {
    createFullBackup,
    createDataBackup,
    createSchemaBackup,
    getDatabaseStats
};