// scripts/debug-events.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å —Å–æ–±—ã—Ç–∏—è–º–∏

const { Pool } = require('pg');

const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 5432,
    database: process.env.DB_NAME || 'visitor_system',
    user: process.env.DB_USER || 'visitor_admin',
    password: process.env.DB_PASSWORD || 'secure_password_123'
};

async function debugEvents() {
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–ë–´–¢–ò–ô');
    console.log('=====================\n');

    const pool = new Pool(dbConfig);

    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        await pool.query('SELECT 1');
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç\n');

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã events
        const tableExists = await pool.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'events'
            );
        `);

        if (!tableExists.rows[0].exists) {
            console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ events –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é: node scripts/migrate-to-events.js migrate');
            return;
        }
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ events —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n');

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã events
        const structure = await pool.query(`
            SELECT column_name, data_type, is_nullable 
            FROM information_schema.columns 
            WHERE table_name = 'events' 
            ORDER BY ordinal_position;
        `);

        console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã events:');
        structure.rows.forEach(col => {
            console.log(`   ${col.column_name}: ${col.data_type} ${col.is_nullable === 'NO' ? '(NOT NULL)' : ''}`);
        });
        console.log('');

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
        const totalEvents = await pool.query('SELECT COUNT(*) as count FROM events');
        console.log(`üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –≤ –±–∞–∑–µ: ${totalEvents.rows[0].count}\n`);

        if (parseInt(totalEvents.rows[0].count) === 0) {
            console.log('‚ö†Ô∏è –í –±–∞–∑–µ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ...\n');
            await createTestEvents(pool);
        }

        // 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
        const allEvents = await pool.query(`
            SELECT id, name, status, start_date, end_date, created_at 
            FROM events 
            ORDER BY created_at DESC
        `);

        console.log('üìã –í—Å–µ —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑–µ:');
        if (allEvents.rows.length === 0) {
            console.log('   (–Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π)');
        } else {
            allEvents.rows.forEach((event, i) => {
                console.log(`   ${i + 1}. ID: ${event.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: "${event.name}"`);
                console.log(`      –°—Ç–∞—Ç—É—Å: ${event.status}, –î–∞—Ç—ã: ${event.start_date} - ${event.end_date}`);
                console.log(`      –°–æ–∑–¥–∞–Ω–æ: ${event.created_at}`);
                console.log('');
            });
        }

        // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        const activeEvents = await pool.query(`
            SELECT id, name, status, start_date, end_date 
            FROM events 
            WHERE status = 'active' AND end_date >= CURRENT_DATE
            ORDER BY start_date
        `);

        console.log('üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (—Å—Ç–∞—Ç—É—Å = active, –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è >= —Å–µ–≥–æ–¥–Ω—è):');
        if (activeEvents.rows.length === 0) {
            console.log('   ‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π!');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—ã
            const inactiveCount = await pool.query(`SELECT COUNT(*) as count FROM events WHERE status != 'active'`);
            const expiredCount = await pool.query(`SELECT COUNT(*) as count FROM events WHERE end_date < CURRENT_DATE`);

            console.log(`   - –°–æ–±—ã—Ç–∏—è —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º: ${inactiveCount.rows[0].count}`);
            console.log(`   - –°–æ–±—ã—Ç–∏—è —Å –∏—Å—Ç–µ–∫—à–µ–π –¥–∞—Ç–æ–π: ${expiredCount.rows[0].count}`);

        } else {
            activeEvents.rows.forEach((event, i) => {
                console.log(`   ${i + 1}. ID: ${event.id}, "${event.name}" (${event.start_date} - ${event.end_date})`);
            });
        }
        console.log('');

        // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç API
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –∏–∑ API /api/visitors/events/active:');
        const apiQuery = `
            SELECT id, name, description, start_date, end_date, location, status
            FROM events
            WHERE status = 'active' AND end_date >= CURRENT_DATE
            ORDER BY start_date ASC
        `;

        const apiResult = await pool.query(apiQuery);
        console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${apiResult.rows.length} —Å–æ–±—ã—Ç–∏–π`);

        if (apiResult.rows.length > 0) {
            console.log('   –°–æ–±—ã—Ç–∏—è –∏–∑ API –∑–∞–ø—Ä–æ—Å–∞:');
            apiResult.rows.forEach((event, i) => {
                console.log(`     ${i + 1}. ID: ${event.id}, "${event.name}"`);
            });
        } else {
            console.log('   ‚ùå API –∑–∞–ø—Ä–æ—Å –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è');
        }
        console.log('');

        // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        console.log('üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ events:');
        try {
            await pool.query('SELECT * FROM events LIMIT 1');
            console.log('   ‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –µ—Å—Ç—å');
        } catch (err) {
            console.log('   ‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ:', err.message);
        }

        try {
            await pool.query(`INSERT INTO events (name, start_date, end_date) VALUES ('test', CURRENT_DATE, CURRENT_DATE + INTERVAL '1 day')`);
            await pool.query(`DELETE FROM events WHERE name = 'test'`);
            console.log('   ‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –µ—Å—Ç—å');
        } catch (err) {
            console.log('   ‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å:', err.message);
        }
        console.log('');

        // 9. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        console.log('===============');

        if (activeEvents.rows.length === 0) {
            console.log('1. ‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–∏–ª—å—Ç—Ä–µ');
            console.log('   –†–µ—à–µ–Ω–∏–µ: –°–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—ã—Ç–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "active" –∏ –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ –±—É–¥—É—â–µ–º');
            console.log('   –ö–æ–º–∞–Ω–¥–∞: node scripts/debug-events.js create');
        } else {
            console.log('1. ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –µ—Å—Ç—å –≤ –±–∞–∑–µ');
        }

        console.log('2. üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ HTTP API:');
        console.log('   curl http://localhost:3000/api/events');
        console.log('   curl http://localhost:3000/api/visitors/events/active');

        console.log('3. üîß –í –±—Ä–∞—É–∑–µ—Ä–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
        console.log('   debugApp.testEventsAPI()');
        console.log('   debugApp.diagnose()');

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', err);
    } finally {
        await pool.end();
    }
}

async function createTestEvents(pool) {
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π...');

    const testEvents = [
        {
            name: 'IT-–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è 2025',
            description: '–ï–∂–µ–≥–æ–¥–Ω–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º',
            start_date: '2024-12-01',
            end_date: '2025-03-31', // –î–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
            location: '–ú–æ—Å–∫–≤–∞, –¶–í–ö "–≠–∫—Å–ø–æ—Ü–µ–Ω—Ç—Ä"',
            status: 'active'
        },
        {
            name: '–í—ã—Å—Ç–∞–≤–∫–∞ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π 2025',
            description: '–í—ã—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤',
            start_date: '2024-11-15',
            end_date: '2025-02-28', // –î–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
            location: '–°–ü–±, –õ–µ–Ω—ç–∫—Å–ø–æ',
            status: 'active'
        },
        {
            name: '–°–µ–º–∏–Ω–∞—Ä –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
            description: '–û–±—É—á–∞—é—â–∏–π —Å–µ–º–∏–Ω–∞—Ä –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
            start_date: '2024-11-01',
            end_date: '2025-01-31', // –î–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
            location: '–û–Ω–ª–∞–π–Ω',
            status: 'active'
        }
    ];

    let created = 0;
    for (const event of testEvents) {
        try {
            await pool.query(`
                INSERT INTO events (name, description, start_date, end_date, location, status, created_by)
                VALUES ($1, $2, $3, $4, $5, $6, 1)
            `, [event.name, event.description, event.start_date, event.end_date, event.location, event.status]);

            console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ: ${event.name}`);
            created++;
        } catch (err) {
            if (err.code === '23505') { // Unique constraint
                console.log(`   ‚ö†Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${event.name}`);
            } else {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${event.name}: ${err.message}`);
            }
        }
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${created} –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π\n`);
}

async function fixEventDates(pool) {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç —Å–æ–±—ã—Ç–∏–π...');

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∏ –≤ –±—É–¥—É—â–µ–º
    const result = await pool.query(`
        UPDATE events 
        SET 
            end_date = CURRENT_DATE + INTERVAL '3 months',
            status = 'active',
            updated_at = CURRENT_TIMESTAMP
        WHERE end_date < CURRENT_DATE OR status != 'active'
        RETURNING id, name, end_date;
    `);

    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${result.rows.length} —Å–æ–±—ã—Ç–∏–π:`);
    result.rows.forEach(event => {
        console.log(`   - ${event.name} (–Ω–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${event.end_date})`);
    });
}

async function testHTTPEndpoints() {
    console.log('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP endpoints...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å fetch
    if (typeof fetch === 'undefined') {
        global.fetch = require('node-fetch');
    }

    const endpoints = [
        'http://localhost:3000/api/events',
        'http://localhost:3000/api/events?active_only=true',
        'http://localhost:3000/api/visitors/events/active'
    ];

    for (const url of endpoints) {
        try {
            console.log(`üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${url}`);
            const response = await fetch(url);

            console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);

            if (response.ok) {
                const data = await response.json();

                if (data.events) {
                    console.log(`   ‚úÖ –°–æ–±—ã—Ç–∏–π –≤ –æ—Ç–≤–µ—Ç–µ: ${data.events.length}`);
                    if (data.events.length > 0) {
                        console.log(`   üìã –ü–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: "${data.events[0].name}"`);
                    }
                } else if (data.success && data.events) {
                    console.log(`   ‚úÖ –°–æ–±—ã—Ç–∏–π –≤ –æ—Ç–≤–µ—Ç–µ: ${data.events.length}`);
                } else {
                    console.log(`   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:`, Object.keys(data));
                }
            } else {
                const errorText = await response.text();
                console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${errorText.substring(0, 200)}`);
            }
        } catch (err) {
            console.log(`   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${err.message}`);
        }
        console.log('');
    }
}

async function main() {
    const command = process.argv[2];

    switch (command) {
        case 'create':
            const pool1 = new Pool(dbConfig);
            try {
                await createTestEvents(pool1);
            } finally {
                await pool1.end();
            }
            break;

        case 'fix':
            const pool2 = new Pool(dbConfig);
            try {
                await fixEventDates(pool2);
            } finally {
                await pool2.end();
            }
            break;

        case 'http':
            await testHTTPEndpoints();
            break;

        case 'full':
            await debugEvents();
            console.log('\n');
            await testHTTPEndpoints();
            break;

        default:
            await debugEvents();
            break;
    }
}

if (require.main === module) {
    main().catch(console.error);
}

module.exports = { debugEvents, createTestEvents, testHTTPEndpoints };