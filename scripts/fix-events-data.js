// scripts/fix-events-data.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏

const { Pool } = require('pg');

const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 5432,
    database: process.env.DB_NAME || 'visitor_system',
    user: process.env.DB_USER || 'visitor_admin',
    password: process.env.DB_PASSWORD || 'secure_password_123'
};

async function fixEventsData() {
    console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –°–û–ë–´–¢–ò–ô');
    console.log('=============================\n');

    const pool = new Pool(dbConfig);

    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        console.log('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π:');

        const allEvents = await pool.query('SELECT COUNT(*) as total FROM events');
        console.log(`   –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: ${allEvents.rows[0].total}`);

        const activeEvents = await pool.query(`
            SELECT COUNT(*) as active FROM events 
            WHERE status = 'active' AND end_date >= CURRENT_DATE
        `);
        console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: ${activeEvents.rows[0].active}`);
        console.log('');

        // 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
        const existingEvents = await pool.query(`
            SELECT id, name, status, start_date, end_date, 
                   CASE WHEN end_date >= CURRENT_DATE THEN '–±—É–¥—É—â–µ–µ' ELSE '–ø—Ä–æ—à–ª–æ–µ' END as date_status
            FROM events 
            ORDER BY created_at DESC
        `);

        if (existingEvents.rows.length > 0) {
            console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è:');
            existingEvents.rows.forEach((event, i) => {
                const statusIcon = event.status === 'active' ? '‚úÖ' : '‚ùå';
                const dateIcon = event.date_status === '–±—É–¥—É—â–µ–µ' ? 'üìÖ' : '‚è∞';
                console.log(`   ${i + 1}. ${statusIcon}${dateIcon} "${event.name}"`);
                console.log(`      –°—Ç–∞—Ç—É—Å: ${event.status}, –î–∞—Ç—ã: ${event.start_date} - ${event.end_date} (${event.date_status})`);
            });
            console.log('');
        }

        // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è
        console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π...');
        const updateResult = await pool.query(`
            UPDATE events 
            SET 
                status = 'active',
                end_date = CASE 
                    WHEN end_date < CURRENT_DATE THEN CURRENT_DATE + INTERVAL '6 months'
                    ELSE end_date
                END,
                updated_at = CURRENT_TIMESTAMP
            WHERE status != 'active' OR end_date < CURRENT_DATE
            RETURNING id, name, end_date;
        `);

        if (updateResult.rows.length > 0) {
            console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${updateResult.rows.length} —Å–æ–±—ã—Ç–∏–π:`);
            updateResult.rows.forEach(event => {
                console.log(`   - "${event.name}" (–Ω–æ–≤–∞—è –¥–∞—Ç–∞: ${event.end_date})`);
            });
        } else {
            console.log('‚ÑπÔ∏è –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
        }
        console.log('');

        // 4. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è, –µ—Å–ª–∏ –∏—Ö –º–∞–ª–æ
        const activeCount = await pool.query(`
            SELECT COUNT(*) as count FROM events 
            WHERE status = 'active' AND end_date >= CURRENT_DATE
        `);

        if (parseInt(activeCount.rows[0].count) < 3) {
            console.log('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π...');

            const newEvents = [
                {
                    name: 'IT-–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è 2025',
                    description: '–ì–ª–∞–≤–Ω–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º',
                    start_date: '2024-12-01',
                    end_date: '2025-12-31',
                    location: '–ú–æ—Å–∫–≤–∞, –¶–í–ö "–≠–∫—Å–ø–æ—Ü–µ–Ω—Ç—Ä"',
                    status: 'active'
                },
                {
                    name: '–í—ã—Å—Ç–∞–≤–∫–∞ –ò–Ω–Ω–æ–≤–∞—Ü–∏–π',
                    description: '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –≤—ã—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
                    start_date: '2024-11-15',
                    end_date: '2025-11-30',
                    location: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –õ–µ–Ω–≠–∫—Å–ø–æ',
                    status: 'active'
                },
                {
                    name: '–°–µ–º–∏–Ω–∞—Ä –ø–æ –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
                    description: '–û–±—É—á–∞—é—â–∏–π —Å–µ–º–∏–Ω–∞—Ä –¥–ª—è IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤',
                    start_date: '2024-11-01',
                    end_date: '2025-10-31',
                    location: '–û–Ω–ª–∞–π–Ω',
                    status: 'active'
                },
                {
                    name: '–§–æ—Ä—É–º –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
                    description: '–í—Å—Ç—Ä–µ—á–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–æ–≤',
                    start_date: '2024-12-15',
                    end_date: '2025-06-30',
                    location: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
                    status: 'active'
                }
            ];

            let created = 0;
            for (const event of newEvents) {
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                    const existing = await pool.query(
                        'SELECT id FROM events WHERE name = $1',
                        [event.name]
                    );

                    if (existing.rows.length === 0) {
                        await pool.query(`
                            INSERT INTO events (name, description, start_date, end_date, location, status, created_by)
                            VALUES ($1, $2, $3, $4, $5, $6, 1)
                        `, [event.name, event.description, event.start_date, event.end_date, event.location, event.status]);

                        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ: "${event.name}"`);
                        created++;
                    } else {
                        console.log(`   ‚ÑπÔ∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: "${event.name}"`);
                    }
                } catch (err) {
                    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è "${event.name}": ${err.message}`);
                }
            }

            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${created} –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π\n`);
        }

        // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        console.log('üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:');

        const finalCheck = await pool.query(`
            SELECT id, name, status, start_date, end_date
            FROM events 
            WHERE status = 'active' AND end_date >= CURRENT_DATE
            ORDER BY start_date
        `);

        if (finalCheck.rows.length > 0) {
            console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞: ${finalCheck.rows.length}`);
            finalCheck.rows.forEach((event, i) => {
                console.log(`   ${i + 1}. "${event.name}" (${event.start_date} - ${event.end_date})`);
            });
        } else {
            console.log('‚ùå –í—Å–µ –µ—â–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π!');
        }
        console.log('');

        // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –∏–∑ API
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ—á–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å –∏–∑ API:');
        const apiTestQuery = `
            SELECT id, name, description, start_date, end_date, location, status
            FROM events
            WHERE status = 'active' AND end_date >= CURRENT_DATE
            ORDER BY start_date ASC
        `;

        const apiTestResult = await pool.query(apiTestQuery);
        console.log(`üìä API –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å ${apiTestResult.rows.length} —Å–æ–±—ã—Ç–∏–π:`);

        if (apiTestResult.rows.length > 0) {
            apiTestResult.rows.forEach((event, i) => {
                console.log(`   ${i + 1}. ID: ${event.id}, "${event.name}" (${event.location || '–±–µ–∑ –º–µ—Å—Ç–∞'})`);
            });
        } else {
            console.log('   ‚ùå API –≤—Å–µ –µ—â–µ –Ω–µ –≤–µ—Ä–Ω–µ—Ç —Å–æ–±—ã—Ç–∏—è');
        }
        console.log('');

        console.log('üöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
        console.log('1. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
        console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API: curl http://localhost:3000/api/visitors/events/active');
        console.log('3. –í –±—Ä–∞—É–∑–µ—Ä–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: debugApp.forceUpdateFilter()');
        console.log('4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏" –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä —Å–æ–±—ã—Ç–∏–π');

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', err);
    } finally {
        await pool.end();
    }
}

async function testAPIResponse() {
    console.log('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å fetch
    if (typeof fetch === 'undefined') {
        try {
            global.fetch = require('node-fetch');
        } catch (err) {
            console.log('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ node-fetch: npm install node-fetch');
            return;
        }
    }

    const endpoints = [
        'http://localhost:3000/api/events',
        'http://localhost:3000/api/visitors/events/active'
    ];

    for (const url of endpoints) {
        try {
            console.log(`üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${url}`);
            const response = await fetch(url);

            console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);

            if (response.ok) {
                const data = await response.json();

                if (data.events) {
                    console.log(`   ‚úÖ –°–æ–±—ã—Ç–∏–π –≤ –æ—Ç–≤–µ—Ç–µ: ${data.events.length}`);
                    if (data.events.length > 0) {
                        console.log(`   üìã –°–æ–±—ã—Ç–∏—è:`);
                        data.events.slice(0, 3).forEach((event, i) => {
                            console.log(`      ${i + 1}. "${event.name}"`);
                        });
                        if (data.events.length > 3) {
                            console.log(`      ... –∏ –µ—â–µ ${data.events.length - 3}`);
                        }
                    } else {
                        console.log('   ‚ö†Ô∏è –ú–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç');
                    }
                } else {
                    console.log(`   ‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—è events –≤ –æ—Ç–≤–µ—Ç–µ`);
                    console.log(`   üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞:`, Object.keys(data));
                }
            } else {
                const errorText = await response.text();
                console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${errorText.substring(0, 100)}`);
            }
        } catch (err) {
            console.log(`   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${err.message}`);
        }
        console.log('');
    }
}

async function main() {
    const command = process.argv[2];

    switch (command) {
        case 'test':
            await testAPIResponse();
            break;
        case 'fix':
        default:
            await fixEventsData();
            console.log('\n');
            await testAPIResponse();
            break;
    }
}

if (require.main === module) {
    main().catch(console.error);
}

module.exports = { fixEventsData, testAPIResponse };