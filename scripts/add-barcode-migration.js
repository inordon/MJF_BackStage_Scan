// scripts/add-barcode-migration.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è barcode –≤ —Ç–∞–±–ª–∏—Ü—É visitors

const { Pool } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 5432,
    database: process.env.DB_NAME || 'visitor_system',
    user: process.env.DB_USER || 'visitor_admin',
    password: process.env.DB_PASSWORD || 'secure_password_123'
};

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
function generateBarcode(index, date) {
    const dateStr = date.toISOString().slice(0, 10).replace(/-/g, ''); // YYYYMMDD
    const indexStr = String(index).padStart(3, '0'); // 001, 002, etc.
    return `VIS${dateStr}${indexStr}`;
}

async function addBarcodeField() {
    console.log('üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è barcode –≤ —Ç–∞–±–ª–∏—Ü—É visitors...\n');

    const pool = new Pool(dbConfig);

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await pool.query('SELECT 1');
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–ª–æ–Ω–∫–∞ barcode
        const columnCheck = await pool.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.columns 
                WHERE table_name = 'visitors' 
                AND column_name = 'barcode'
            );
        `);

        if (columnCheck.rows[0].exists) {
            console.log('‚ÑπÔ∏è  –ö–æ–ª–æ–Ω–∫–∞ barcode —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        } else {
            console.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ barcode...');

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É barcode
            await pool.query(`
                ALTER TABLE visitors ADD COLUMN barcode VARCHAR(100) UNIQUE;
            `);

            console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ barcode –¥–æ–±–∞–≤–ª–µ–Ω–∞');
        }

        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É
        console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞...');
        await pool.query(`
            CREATE INDEX IF NOT EXISTS idx_visitors_barcode ON visitors(barcode);
        `);
        console.log('‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω');

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        await pool.query(`
            COMMENT ON COLUMN visitors.barcode IS '–®—Ç—Ä–∏—Ö–∫–æ–¥ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞';
        `);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –±–µ–∑ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
        const visitorsWithoutBarcode = await pool.query(`
            SELECT COUNT(*) as count FROM visitors WHERE barcode IS NULL
        `);

        const visitorsCount = parseInt(visitorsWithoutBarcode.rows[0].count);

        if (visitorsCount > 0) {
            console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${visitorsCount} –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –±–µ–∑ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞`);
            console.log('üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π...');

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –±–µ–∑ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
            const visitorsResult = await pool.query(`
                SELECT id, created_at 
                FROM visitors 
                WHERE barcode IS NULL 
                ORDER BY created_at ASC
            `);

            let index = 1;
            for (const visitor of visitorsResult.rows) {
                const barcode = generateBarcode(index, new Date(visitor.created_at));

                try {
                    await pool.query(
                        'UPDATE visitors SET barcode = $1 WHERE id = $2',
                        [barcode, visitor.id]
                    );

                    if (index <= 5) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                        console.log(`   ‚úÖ –ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å ID ${visitor.id}: ${barcode}`);
                    }
                } catch (err) {
                    if (err.code === '23505') { // unique violation
                        // –ï—Å–ª–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
                        const uniqueBarcode = barcode + Math.floor(Math.random() * 100);
                        await pool.query(
                            'UPDATE visitors SET barcode = $1 WHERE id = $2',
                            [uniqueBarcode, visitor.id]
                        );
                        console.log(`   ‚ö†Ô∏è  –ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å ID ${visitor.id}: ${uniqueBarcode} (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç)`);
                    } else {
                        throw err;
                    }
                }

                index++;
            }

            if (visitorsCount > 5) {
                console.log(`   ... –∏ –µ—â–µ ${visitorsCount - 5} –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π`);
            }

            console.log('‚úÖ –®—Ç—Ä–∏—Ö–∫–æ–¥—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:');

        const finalStats = await pool.query(`
            SELECT 
                COUNT(*) as total_visitors,
                COUNT(barcode) as visitors_with_barcode,
                COUNT(CASE WHEN barcode IS NULL THEN 1 END) as visitors_without_barcode
            FROM visitors
        `);

        const stats = finalStats.rows[0];
        console.log(`   üë• –í—Å–µ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: ${stats.total_visitors}`);
        console.log(`   üìä –° —à—Ç—Ä–∏—Ö–∫–æ–¥–∞–º–∏: ${stats.visitors_with_barcode}`);
        console.log(`   ‚ùå –ë–µ–∑ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤: ${stats.visitors_without_barcode}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤
        const sampleBarcodes = await pool.query(`
            SELECT barcode, last_name, first_name 
            FROM visitors 
            WHERE barcode IS NOT NULL 
            ORDER BY created_at 
            LIMIT 3
        `);

        if (sampleBarcodes.rows.length > 0) {
            console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤:');
            sampleBarcodes.rows.forEach(visitor => {
                console.log(`   üìä ${visitor.barcode} - ${visitor.last_name} ${visitor.first_name}`);
            });
        }

        console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log('\nüí° –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:');
        console.log('   ‚ú® –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ barcode –≤ —Ç–∞–±–ª–∏—Ü—É visitors');
        console.log('   ‚ú® –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É');
        console.log('   ‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π');
        console.log('   ‚ú® QR –∫–æ–¥—ã —Ç–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∏–∑ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤, –∞ –Ω–µ –∏–∑ UUID');

        console.log('\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
        console.log('   1. –û–±–Ω–æ–≤–∏—Ç–µ routes/visitors.js');
        console.log('   2. –û–±–Ω–æ–≤–∏—Ç–µ routes/scan.js');
        console.log('   3. –û–±–Ω–æ–≤–∏—Ç–µ public/index.html');
        console.log('   4. –û–±–Ω–æ–≤–∏—Ç–µ public/scan.html');
        console.log('   5. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä');

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', err);

        if (err.code === 'ECONNREFUSED') {
            console.error('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞');
        } else if (err.code === '42P01') {
            console.error('üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏. –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å init.sql —Å–Ω–∞—á–∞–ª–∞');
        }

        process.exit(1);
    } finally {
        await pool.end();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
async function rollbackBarcodeMigration() {
    console.log('üîÑ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤...\n');

    const pool = new Pool(dbConfig);

    try {
        await pool.query('SELECT 1');
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        // –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É barcode
        console.log('üìã –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ barcode...');
        await pool.query('ALTER TABLE visitors DROP COLUMN IF EXISTS barcode CASCADE');
        console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ barcode —É–¥–∞–ª–µ–Ω–∞');

        console.log('\n‚úÖ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
        console.log('üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ!');

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞:', err);
        process.exit(1);
    } finally {
        await pool.end();
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
async function checkBarcodeStatus() {
    const pool = new Pool(dbConfig);

    try {
        await pool.query('SELECT 1');
        console.log('üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤:\n');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É barcode
        const barcodeColumn = await pool.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.columns 
                WHERE table_name = 'visitors' 
                AND column_name = 'barcode'
            );
        `);
        console.log(`üìä –ö–æ–ª–æ–Ω–∫–∞ barcode: ${barcodeColumn.rows[0].exists ? '‚úÖ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å
        const barcodeIndex = await pool.query(`
            SELECT EXISTS (
                SELECT FROM pg_indexes 
                WHERE tablename = 'visitors' 
                AND indexname = 'idx_visitors_barcode'
            );
        `);
        console.log(`üîç –ò–Ω–¥–µ–∫—Å —à—Ç—Ä–∏—Ö–∫–æ–¥–∞: ${barcodeIndex.rows[0].exists ? '‚úÖ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);

        if (barcodeColumn.rows[0].exists) {
            // –°—á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            const counts = await pool.query(`
                SELECT 
                    COUNT(*) as total_visitors,
                    COUNT(barcode) as visitors_with_barcode,
                    COUNT(CASE WHEN barcode IS NULL THEN 1 END) as visitors_without_barcode
                FROM visitors
            `);
            console.log(`üë• –í—Å–µ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: ${counts.rows[0].total_visitors}`);
            console.log(`üìä –° —à—Ç—Ä–∏—Ö–∫–æ–¥–∞–º–∏: ${counts.rows[0].visitors_with_barcode}`);
            console.log(`‚ùå –ë–µ–∑ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤: ${counts.rows[0].visitors_without_barcode}`);
        }

        const migrationComplete = barcodeColumn.rows[0].exists && barcodeIndex.rows[0].exists;
        console.log(`\nüèÅ –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏: ${migrationComplete ? '‚úÖ –ó–ê–í–ï–†–®–ï–ù–ê' : '‚ùå –ù–ï –ó–ê–í–ï–†–®–ï–ù–ê'}`);

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', err);
    } finally {
        await pool.end();
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const command = process.argv[2];

    switch (command) {
        case 'migrate':
        case 'up':
            await addBarcodeField();
            break;
        case 'rollback':
        case 'down':
            const confirmed = process.argv[3] === '--confirm';
            if (!confirmed) {
                console.log('‚ö†Ô∏è  –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–∏—Ç –≤—Å–µ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã!');
                console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node add-barcode-migration.js rollback --confirm');
                return;
            }
            await rollbackBarcodeMigration();
            break;
        case 'status':
            await checkBarcodeStatus();
            break;
        default:
            console.log('üîß –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤');
            console.log('=============================================');
            console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
            console.log('  node add-barcode-migration.js migrate     # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é');
            console.log('  node add-barcode-migration.js rollback --confirm # –û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é');
            console.log('  node add-barcode-migration.js status      # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å');
            console.log('');
            console.log('–ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç:');
            console.log('  - –ü–æ–ª–µ barcode –≤ —Ç–∞–±–ª–∏—Ü—É visitors');
            console.log('  - –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É');
            console.log('  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π');
            console.log('  - QR –∫–æ–¥—ã —Ç–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∏–∑ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main().catch(console.error);
}

module.exports = { addBarcodeField, rollbackBarcodeMigration, checkBarcodeStatus };