// scripts/create-admin.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

const bcrypt = require('bcryptjs');
const { Pool } = require('pg');
const readline = require('readline');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 5432,
    database: process.env.DB_NAME || 'visitor_system',
    user: process.env.DB_USER || 'visitor_admin',
    password: process.env.DB_PASSWORD || 'secure_password_123'
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
function askQuestion(question) {
    return new Promise((resolve) => {
        rl.question(question, (answer) => {
            resolve(answer.trim());
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è (—Å–∫—Ä—ã—Ç—ã–π –≤–≤–æ–¥)
function askPassword(question) {
    return new Promise((resolve) => {
        process.stdout.write(question);

        // –°–∫—Ä—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
        process.stdin.setRawMode(true);
        process.stdin.resume();
        process.stdin.setEncoding('utf8');

        let password = '';

        process.stdin.on('data', function(char) {
            char = char + '';

            switch(char) {
                case '\n':
                case '\r':
                case '\u0004':
                    // Enter
                    process.stdin.setRawMode(false);
                    process.stdin.pause();
                    process.stdout.write('\n');
                    resolve(password);
                    break;
                case '\u0003':
                    // Ctrl+C
                    process.exit();
                    break;
                case '\u007f':
                    // Backspace
                    if (password.length > 0) {
                        password = password.slice(0, -1);
                        process.stdout.write('\b \b');
                    }
                    break;
                default:
                    // –û–±—ã—á–Ω—ã–π —Å–∏–º–≤–æ–ª
                    password += char;
                    process.stdout.write('*');
                    break;
            }
        });
    });
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è email
function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏–Ω–∞
function isValidUsername(username) {
    const usernameRegex = /^[a-zA-Z0-9_]{3,50}$/;
    return usernameRegex.test(username);
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function createAdmin() {
    console.log('üëë –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    console.log('=' .repeat(50));

    const pool = new Pool(dbConfig);

    try {
        // –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        let username, password, confirmPassword, fullName, email;

        // –õ–æ–≥–∏–Ω
        while (true) {
            username = await askQuestion('üìù –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω (3-50 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _): ');

            if (!isValidUsername(username)) {
                console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.');
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            const existingUser = await pool.query('SELECT id FROM users WHERE username = $1', [username]);
            if (existingUser.rows.length > 0) {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
                continue;
            }

            break;
        }

        // –ü–∞—Ä–æ–ª—å
        while (true) {
            password = await askPassword('üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤): ');

            if (password.length < 6) {
                console.log('‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.');
                continue;
            }

            confirmPassword = await askPassword('üîí –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ');

            if (password !== confirmPassword) {
                console.log('‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.');
                continue;
            }

            break;
        }

        // –ü–æ–ª–Ω–æ–µ –∏–º—è
        while (true) {
            fullName = await askQuestion('üë§ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (2-100 —Å–∏–º–≤–æ–ª–æ–≤): ');

            if (fullName.length < 2 || fullName.length > 100) {
                console.log('‚ùå –ü–æ–ª–Ω–æ–µ –∏–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.');
                continue;
            }

            break;
        }

        // Email (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        while (true) {
            email = await askQuestion('üìß –í–≤–µ–¥–∏—Ç–µ email (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ');

            if (email === '') {
                email = null;
                break;
            }

            if (!isValidEmail(email)) {
                console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.');
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email
            const existingEmail = await pool.query('SELECT id FROM users WHERE email = $1', [email]);
            if (existingEmail.rows.length > 0) {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
                continue;
            }

            break;
        }

        console.log('\nüìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:');
        console.log(`   –õ–æ–≥–∏–Ω: ${username}`);
        console.log(`   –ü–æ–ª–Ω–æ–µ –∏–º—è: ${fullName}`);
        console.log(`   Email: ${email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`   –†–æ–ª—å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä`);

        const confirm = await askQuestion('\n‚úÖ –°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞? (yes/no): ');

        if (confirm.toLowerCase() !== 'yes' && confirm.toLowerCase() !== 'y') {
            console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return;
        }

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        console.log('\nüîê –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è...');
        const saltRounds = 12;
        const passwordHash = await bcrypt.hash(password, saltRounds);

        // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        console.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        const result = await pool.query(`
            INSERT INTO users (
                username, password_hash, full_name, role, email, is_active
            ) VALUES ($1, $2, $3, 'admin', $4, true)
            RETURNING id, username, full_name, created_at
        `, [username, passwordHash, fullName, email]);

        const newAdmin = result.rows[0];

        console.log('\nüéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
        console.log(`   ID: ${newAdmin.id}`);
        console.log(`   –õ–æ–≥–∏–Ω: ${newAdmin.username}`);
        console.log(`   –ò–º—è: ${newAdmin.full_name}`);
        console.log(`   –°–æ–∑–¥–∞–Ω: ${new Date(newAdmin.created_at).toLocaleString('ru-RU')}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const usersStats = await pool.query(`
            SELECT 
                role,
                COUNT(*) as count
            FROM users 
            WHERE is_active = true
            GROUP BY role
            ORDER BY role
        `);

        console.log('\nüìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:');
        usersStats.rows.forEach(stat => {
            const roleNames = {
                'admin': 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã',
                'moderator': '‚öôÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã',
                'skd': 'üîí –°–ö–î'
            };
            console.log(`   ${roleNames[stat.role] || stat.role}: ${stat.count}`);
        });

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', err.message);

        if (err.code === '23505') { // Unique violation
            console.error('üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
        }

        process.exit(1);
    } finally {
        await pool.end();
        rl.close();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
async function createAdminFromArgs() {
    const args = process.argv.slice(2);

    if (args.length < 3) {
        console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
        console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node create-admin.js <username> <password> <fullName> [email]');
        console.log('–ü—Ä–∏–º–µ—Ä: node create-admin.js newadmin mypassword123 "–ù–æ–≤—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" admin@example.com');
        return;
    }

    const [username, password, fullName, email] = args;

    const pool = new Pool(dbConfig);

    try {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!isValidUsername(username)) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω');
        }

        if (password.length < 6) {
            throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
        }

        if (fullName.length < 2) {
            throw new Error('–ü–æ–ª–Ω–æ–µ –∏–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
        }

        if (email && !isValidEmail(email)) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        const existingUser = await pool.query('SELECT id FROM users WHERE username = $1', [username]);
        if (existingUser.rows.length > 0) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }

        if (email) {
            const existingEmail = await pool.query('SELECT id FROM users WHERE email = $1', [email]);
            if (existingEmail.rows.length > 0) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }
        }

        // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const passwordHash = await bcrypt.hash(password, 12);

        const result = await pool.query(`
            INSERT INTO users (
                username, password_hash, full_name, role, email, is_active
            ) VALUES ($1, $2, $3, 'admin', $4, true)
            RETURNING id, username, full_name, created_at
        `, [username, passwordHash, fullName, email || null]);

        const newAdmin = result.rows[0];

        console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω:');
        console.log(`   ID: ${newAdmin.id}`);
        console.log(`   –õ–æ–≥–∏–Ω: ${newAdmin.username}`);
        console.log(`   –ò–º—è: ${newAdmin.full_name}`);

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
        process.exit(1);
    } finally {
        await pool.end();
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const pool = new Pool(dbConfig);
        await pool.query('SELECT 1');
        await pool.end();

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        const args = process.argv.slice(2);
        if (args.length > 0) {
            await createAdminFromArgs();
        } else {
            await createAdmin();
        }

    } catch (err) {
        if (err.code === 'ECONNREFUSED') {
            console.error('‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            console.error('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
        }
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main();
}

module.exports = { createAdmin, createAdminFromArgs };