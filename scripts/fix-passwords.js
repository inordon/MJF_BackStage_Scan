// scripts/fix-passwords.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

const bcrypt = require('bcryptjs');
const { Pool } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 5432,
    database: process.env.DB_NAME || 'visitor_system',
    user: process.env.DB_USER || 'visitor_admin',
    password: process.env.DB_PASSWORD || 'secure_password_123'
};

// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const correctPasswords = {
    'admin': 'admin123',
    'moderator': 'moderator123',
    'skd_user': 'skd123'
};

async function fixPasswords() {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');

    const pool = new Pool(dbConfig);

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await pool.query('SELECT 1');
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ö–µ—à–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª–∏
        for (const [username, password] of Object.entries(correctPasswords)) {
            console.log(`\nüîê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à —Å 12 —Ä–∞—É–Ω–¥–∞–º–∏
            const saltRounds = 12;
            const hash = await bcrypt.hash(password, saltRounds);

            console.log(`   –ü–∞—Ä–æ–ª—å: ${password}`);
            console.log(`   –•–µ—à: ${hash}`);

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const result = await pool.query(
                'UPDATE users SET password_hash = $1 WHERE username = $2 RETURNING id, username',
                [hash, username]
            );

            if (result.rows.length > 0) {
                console.log(`   ‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${result.rows[0].id}`);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–µ—à —Ä–∞–±–æ—Ç–∞–µ—Ç
                const isValid = await bcrypt.compare(password, hash);
                console.log(`   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∞: ${isValid ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}`);
            } else {
                console.log(`   ‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        }

        console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ:');

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –ø–∞—Ä–æ–ª–∏
        const usersResult = await pool.query(
            'SELECT id, username, password_hash, role FROM users ORDER BY id'
        );

        for (const user of usersResult.rows) {
            const expectedPassword = correctPasswords[user.username];

            if (expectedPassword) {
                const isValid = await bcrypt.compare(expectedPassword, user.password_hash);
                console.log(`   ${user.username} (${user.role}): ${isValid ? '‚úÖ' : '‚ùå'} ${expectedPassword}`);
            } else {
                console.log(`   ${user.username} (${user.role}): ‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–∞—Ä–æ–ª—å`);
            }
        }

        console.log('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

        console.log('\nüîê –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
        console.log('   üëë admin / admin123');
        console.log('   ‚öôÔ∏è moderator / moderator123');
        console.log('   üîí skd_user / skd123');

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);

        if (err.code === 'ECONNREFUSED') {
            console.error('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞');
        }

        process.exit(1);
    } finally {
        await pool.end();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function testLogin() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...\n');

    const pool = new Pool(dbConfig);

    try {
        for (const [username, password] of Object.entries(correctPasswords)) {
            console.log(`üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${username} / ${password}`);

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userResult = await pool.query(
                'SELECT id, username, password_hash, role, is_active FROM users WHERE username = $1',
                [username]
            );

            if (!userResult.rows.length) {
                console.log(`   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                continue;
            }

            const user = userResult.rows[0];

            if (!user.is_active) {
                console.log(`   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            const isValid = await bcrypt.compare(password, user.password_hash);
            console.log(`   ${isValid ? '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞' : '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'}`);
        }

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', err.message);
    } finally {
        await pool.end();
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const command = process.argv[2];

    switch (command) {
        case 'fix':
            await fixPasswords();
            break;
        case 'test':
            await testLogin();
            break;
        default:
            console.log('üîß –£—Ç–∏–ª–∏—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π');
            console.log('=====================================');
            console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
            console.log('  node fix-passwords.js fix   # –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª–∏');
            console.log('  node fix-passwords.js test  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
            console.log('');
            console.log('–î–µ–º–æ –ø–∞—Ä–æ–ª–∏:');
            Object.entries(correctPasswords).forEach(([user, pass]) => {
                console.log(`  ${user}: ${pass}`);
            });
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main().catch(console.error);
}

module.exports = { fixPasswords, testLogin };