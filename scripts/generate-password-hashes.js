// scripts/generate-password-hashes.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ö–µ—à–µ–π –ø–∞—Ä–æ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

const bcrypt = require('bcryptjs');

async function generateHashes() {
    const saltRounds = 12;

    const passwords = {
        admin: 'admin123',
        moderator: 'moderator123',
        skd: 'skd123'
    };

    console.log('üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–µ–π –ø–∞—Ä–æ–ª–µ–π...\n');

    for (const [user, password] of Object.entries(passwords)) {
        try {
            const hash = await bcrypt.hash(password, saltRounds);
            console.log(`${user}:`);
            console.log(`  –ü–∞—Ä–æ–ª—å: ${password}`);
            console.log(`  –•–µ—à: ${hash}`);
            console.log('');
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞ –¥–ª—è ${user}:`, error);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à–∏
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–µ–π:');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ö–µ—à–∏
    console.log('\n=== –ü–†–ê–í–ò–õ–¨–ù–´–ï –•–ï–®–ò –î–õ–Ø init.sql ===\n');

    const correctAdminHash = await bcrypt.hash('admin123', 12);
    const correctModeratorHash = await bcrypt.hash('moderator123', 12);
    const correctSkdHash = await bcrypt.hash('skd123', 12);

    console.log(`-- admin123`);
    console.log(`'${correctAdminHash}'`);
    console.log();

    console.log(`-- moderator123`);
    console.log(`'${correctModeratorHash}'`);
    console.log();

    console.log(`-- skd123`);
    console.log(`'${correctSkdHash}'`);
    console.log();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ö–µ—à–∏
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ö–µ—à–µ–π:');
    console.log(`admin123: ${await bcrypt.compare('admin123', correctAdminHash) ? '‚úÖ' : '‚ùå'}`);
    console.log(`moderator123: ${await bcrypt.compare('moderator123', correctModeratorHash) ? '‚úÖ' : '‚ùå'}`);
    console.log(`skd123: ${await bcrypt.compare('skd123', correctSkdHash) ? '‚úÖ' : '‚ùå'}`);

    console.log('\nüí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ö–µ—à–∏ –≤—ã—à–µ –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –∏—Ö –≤ —Ñ–∞–π–ª–µ init.sql');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
async function generateSingleHash(password, rounds = 12) {
    if (!password) {
        console.log('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å');
        console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node generate-password-hashes.js <password> [rounds]');
        return;
    }

    try {
        const hash = await bcrypt.hash(password, rounds);

        console.log('üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è');
        console.log('=' .repeat(30));
        console.log(`–ü–∞—Ä–æ–ª—å: ${password}`);
        console.log(`–†–∞—É–Ω–¥—ã: ${rounds}`);
        console.log(`–•–µ—à: ${hash}`);
        console.log();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à
        const isValid = await bcrypt.compare(password, hash);
        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞: ${isValid ? '‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}`);

        if (isValid) {
            console.log('\nüìã –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ init.sql:');
            console.log(`'${hash}'`);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞:', error.message);
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const args = process.argv.slice(2);

    if (args.length > 0) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
        const password = args[0];
        const rounds = parseInt(args[1]) || 12;
        await generateSingleHash(password, rounds);
    } else {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à–∏ –¥–ª—è –≤—Å–µ—Ö –¥–µ–º–æ –ø–∞—Ä–æ–ª–µ–π
        await generateHashes();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main().catch(console.error);
}

module.exports = { generateHashes, generateSingleHash };