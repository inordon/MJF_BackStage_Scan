// scripts/test-events-api.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —Å–æ–±—ã—Ç–∏–π

const { Pool } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 5432,
    database: process.env.DB_NAME || 'visitor_system',
    user: process.env.DB_USER || 'visitor_admin',
    password: process.env.DB_PASSWORD || 'secure_password_123'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTTP endpoints
async function testHTTPEndpoints() {
    console.log('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP endpoints...\n');

    const endpoints = [
        'http://localhost:3000/api/events',
        'http://localhost:3000/api/events?active_only=true',
        'http://localhost:3000/api/visitors/events/active'
    ];

    for (const endpoint of endpoints) {
        try {
            console.log(`üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${endpoint}`);

            const response = await fetch(endpoint);
            console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);

            if (response.ok) {
                const data = await response.json();
                console.log(`   –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(data, null, 2).substring(0, 200)}...`);

                if (data.events && Array.isArray(data.events)) {
                    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${data.events.length}`);
                } else if (data.success && data.events) {
                    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${data.events.length}`);
                } else {
                    console.log(`   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö`);
                }
            } else {
                const errorText = await response.text();
                console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${errorText.substring(0, 100)}`);
            }
        } catch (err) {
            console.log(`   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${err.message}`);
        }
        console.log('');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function testDatabase() {
    console.log('üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

    const pool = new Pool(dbConfig);

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await pool.query('SELECT 1');
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        const tables = await pool.query(`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name IN ('events', 'visitors', 'users', 'scans')
            ORDER BY table_name
        `);

        console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
        tables.rows.forEach(row => {
            console.log(`   ‚úÖ ${row.table_name}`);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è
        const eventsCount = await pool.query('SELECT COUNT(*) as count FROM events');
        console.log(`\nüéØ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –≤ –±–∞–∑–µ: ${eventsCount.rows[0].count}`);

        if (parseInt(eventsCount.rows[0].count) > 0) {
            const activeEvents = await pool.query(`
                SELECT id, name, status, start_date, end_date 
                FROM events 
                WHERE status = 'active' AND end_date >= CURRENT_DATE
                ORDER BY start_date
            `);

            console.log(`üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: ${activeEvents.rows.length}`);
            activeEvents.rows.forEach((event, i) => {
                console.log(`   ${i + 1}. ${event.name} (${event.start_date} - ${event.end_date})`);
            });
        } else {
            console.log('‚ö†Ô∏è –°–æ–±—ã—Ç–∏—è –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');

            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
            console.log('\nüîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π...');
            const testEvents = [
                {
                    name: 'IT-–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è 2024',
                    description: '–ï–∂–µ–≥–æ–¥–Ω–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º',
                    start_date: '2024-12-01',
                    end_date: '2024-12-31',
                    location: '–ú–æ—Å–∫–≤–∞, –¶–í–ö "–≠–∫—Å–ø–æ—Ü–µ–Ω—Ç—Ä"'
                },
                {
                    name: '–í—ã—Å—Ç–∞–≤–∫–∞ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π',
                    description: '–í—ã—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤',
                    start_date: '2024-11-15',
                    end_date: '2024-12-15',
                    location: '–°–ü–±, –õ–µ–Ω—ç–∫—Å–ø–æ'
                }
            ];

            for (const event of testEvents) {
                try {
                    await pool.query(`
                        INSERT INTO events (name, description, start_date, end_date, location, created_by)
                        VALUES ($1, $2, $3, $4, $5, 1)
                    `, [event.name, event.description, event.start_date, event.end_date, event.location]);

                    console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ: ${event.name}`);
                } catch (err) {
                    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${event.name}: ${err.message}`);
                }
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
        const visitorsCount = await pool.query('SELECT COUNT(*) as count FROM visitors');
        console.log(`\nüë• –í—Å–µ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: ${visitorsCount.rows[0].count}`);

        const visitorsWithEvents = await pool.query(`
            SELECT COUNT(*) as count FROM visitors WHERE event_id IS NOT NULL
        `);
        console.log(`üîó –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π —Å —Å–æ–±—ã—Ç–∏—è–º–∏: ${visitorsWithEvents.rows[0].count}`);

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err.message);
    } finally {
        await pool.end();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async function fullDiagnostic() {
    console.log('üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –°–û–ë–´–¢–ò–ô');
    console.log('=====================================\n');

    try {
        await testDatabase();
        console.log('\n');
        await testHTTPEndpoints();

        console.log('üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        console.log('================');
        console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000');
        console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–±—ã—Ç–∏—è');
        console.log('3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ endpoint /api/visitors/events/active –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ');
        console.log('4. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞');
        console.log('5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ debugApp.testEventsAPI() –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞');

    } catch (err) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', err);
    }
}

// –¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function testOnlyDatabase() {
    await testDatabase();
}

// –¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ HTTP
async function testOnlyHTTP() {
    await testHTTPEndpoints();
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const command = process.argv[2];

    switch (command) {
        case 'db':
            await testOnlyDatabase();
            break;
        case 'http':
            await testOnlyHTTP();
            break;
        case 'full':
        default:
            await fullDiagnostic();
            break;
    }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ fetch
    if (typeof fetch === 'undefined') {
        global.fetch = require('node-fetch');
    }

    main().catch(console.error);
}

module.exports = { testDatabase, testHTTPEndpoints, fullDiagnostic };