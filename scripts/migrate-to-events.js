// scripts/migrate-to-events.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º—ã –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Å–æ–±—ã—Ç–∏–π

const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 5432,
    database: process.env.DB_NAME || 'visitor_system',
    user: process.env.DB_USER || 'visitor_admin',
    password: process.env.DB_PASSWORD || 'secure_password_123'
};

async function runMigration() {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ–±—ã—Ç–∏–π...\n');

    const pool = new Pool(dbConfig);

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await pool.query('SELECT 1');
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–±–ª–∏—Ü–∞ events
        const eventsTableCheck = await pool.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'events'
            );
        `);

        if (eventsTableCheck.rows[0].exists) {
            console.log('‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü–∞ events —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ...');
        } else {
            console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã events...');
            await pool.query(`
                CREATE TABLE events (
                    id SERIAL PRIMARY KEY,
                    event_uuid UUID DEFAULT uuid_generate_v4() UNIQUE NOT NULL,
                    name VARCHAR(200) NOT NULL,
                    description TEXT,
                    start_date DATE NOT NULL,
                    end_date DATE NOT NULL,
                    location VARCHAR(300),
                    status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'completed', 'cancelled')),
                    max_participants INTEGER DEFAULT NULL,
                    registration_required BOOLEAN DEFAULT false,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    created_by INTEGER REFERENCES users(id),
                    updated_by INTEGER REFERENCES users(id)
                );
            `);
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ events —Å–æ–∑–¥–∞–Ω–∞');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–ª–æ–Ω–∫–∞ event_id –≤ —Ç–∞–±–ª–∏—Ü–µ visitors
        const eventIdColumnCheck = await pool.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.columns 
                WHERE table_name = 'visitors' 
                AND column_name = 'event_id'
            );
        `);

        if (eventIdColumnCheck.rows[0].exists) {
            console.log('‚ÑπÔ∏è  –ö–æ–ª–æ–Ω–∫–∞ event_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ visitors');
        } else {
            console.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ event_id –≤ —Ç–∞–±–ª–∏—Ü—É visitors...');
            await pool.query(`
                ALTER TABLE visitors ADD COLUMN event_id INTEGER REFERENCES events(id);
            `);
            console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ event_id –¥–æ–±–∞–≤–ª–µ–Ω–∞');
        }

        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');

        const indexQueries = [
            'CREATE INDEX IF NOT EXISTS idx_events_dates ON events(start_date, end_date);',
            'CREATE INDEX IF NOT EXISTS idx_events_status ON events(status);',
            'CREATE INDEX IF NOT EXISTS idx_events_created_at ON events(created_at);',
            'CREATE INDEX IF NOT EXISTS idx_visitors_event_id ON visitors(event_id);'
        ];

        for (const indexQuery of indexQueries) {
            await pool.query(indexQuery);
        }
        console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');

        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è events
        console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è events...');
        await pool.query(`
            DROP TRIGGER IF EXISTS update_events_updated_at ON events;
            CREATE TRIGGER update_events_updated_at
                BEFORE UPDATE ON events
                FOR EACH ROW
                EXECUTE FUNCTION update_updated_at_column();
        `);
        console.log('‚úÖ –¢—Ä–∏–≥–≥–µ—Ä —Å–æ–∑–¥–∞–Ω');

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π...');
        await pool.query(`
            DROP VIEW IF EXISTS events_stats;
            CREATE VIEW events_stats AS
            SELECT
                e.id,
                e.name,
                e.start_date,
                e.end_date,
                e.status,
                COUNT(v.id) as total_visitors,
                COUNT(CASE WHEN v.status = 'active' THEN 1 END) as active_visitors,
                COUNT(CASE WHEN v.status = 'blocked' THEN 1 END) as blocked_visitors,
                COUNT(s.id) as total_scans,
                COUNT(CASE WHEN s.scan_date = CURRENT_DATE THEN 1 END) as today_scans,
                COUNT(DISTINCT CASE WHEN s.scan_type = 'first' THEN s.visitor_id END) as unique_visitors_scanned
            FROM events e
            LEFT JOIN visitors v ON e.id = v.event_id
            LEFT JOIN scans s ON v.id = s.visitor_id
            GROUP BY e.id, e.name, e.start_date, e.end_date, e.status;
        `);
        console.log('‚úÖ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã');

        // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π...');
        await pool.query(`
            CREATE OR REPLACE FUNCTION get_event_stats(event_id_param INTEGER)
            RETURNS TABLE (
                total_visitors BIGINT,
                active_visitors BIGINT,
                blocked_visitors BIGINT,
                total_scans BIGINT,
                today_scans BIGINT,
                unique_visitors_scanned BIGINT,
                daily_scans JSONB
            ) AS $$
            BEGIN
                RETURN QUERY
                SELECT 
                    COUNT(v.id) as total_visitors,
                    COUNT(CASE WHEN v.status = 'active' THEN 1 END) as active_visitors,
                    COUNT(CASE WHEN v.status = 'blocked' THEN 1 END) as blocked_visitors,
                    COUNT(s.id) as total_scans,
                    COUNT(CASE WHEN s.scan_date = CURRENT_DATE THEN 1 END) as today_scans,
                    COUNT(DISTINCT CASE WHEN s.scan_type = 'first' THEN s.visitor_id END) as unique_visitors_scanned,
                    COALESCE(
                        jsonb_agg(
                            jsonb_build_object(
                                'date', s.scan_date,
                                'scans', COUNT(s.id)
                            ) ORDER BY s.scan_date
                        ) FILTER (WHERE s.scan_date IS NOT NULL),
                        '[]'::jsonb
                    ) as daily_scans
                FROM visitors v
                LEFT JOIN scans s ON v.id = s.visitor_id
                WHERE v.event_id = event_id_param;
            END;
            $$ LANGUAGE plpgsql;
        `);
        console.log('‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—ã—Ç–∏–π
        const eventsCount = await pool.query('SELECT COUNT(*) as count FROM events');

        if (parseInt(eventsCount.rows[0].count) === 0) {
            console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π...');

            await pool.query(`
                INSERT INTO events (name, description, start_date, end_date, location, created_by) VALUES
                ('–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è IT-2024', '–ï–∂–µ–≥–æ–¥–Ω–∞—è IT –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è', '2024-06-15', '2024-06-17', '–ú–æ—Å–∫–≤–∞, –¶–í–ö "–≠–∫—Å–ø–æ—Ü–µ–Ω—Ç—Ä"', 1),
                ('–í—ã—Å—Ç–∞–≤–∫–∞ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π', '–í—ã—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π', '2024-07-01', '2024-07-03', '–°–ü–±, –õ–µ–Ω—ç–∫—Å–ø–æ', 1),
                ('–°–µ–º–∏–Ω–∞—Ä –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', '–û–±—É—á–∞—é—â–∏–π —Å–µ–º–∏–Ω–∞—Ä', '2024-06-20', '2024-06-20', '–û–Ω–ª–∞–π–Ω', 1)
            `);
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω—ã');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –±–µ–∑ event_id
        const orphanVisitors = await pool.query('SELECT COUNT(*) as count FROM visitors WHERE event_id IS NULL');

        if (parseInt(orphanVisitors.rows[0].count) > 0) {
            console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${orphanVisitors.rows[0].count} –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–æ–±—ã—Ç–∏—é`);

            // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            const firstEvent = await pool.query('SELECT id FROM events ORDER BY id LIMIT 1');

            if (firstEvent.rows.length > 0) {
                await pool.query(
                    'UPDATE visitors SET event_id = $1 WHERE event_id IS NULL',
                    [firstEvent.rows[0].id]
                );
                console.log('‚úÖ –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–µ—Ä–≤–æ–º—É —Å–æ–±—ã—Ç–∏—é');
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:');

        const finalStats = await pool.query(`
            SELECT 
                (SELECT COUNT(*) FROM events) as events_count,
                (SELECT COUNT(*) FROM visitors) as visitors_count,
                (SELECT COUNT(*) FROM visitors WHERE event_id IS NOT NULL) as visitors_with_events,
                (SELECT COUNT(*) FROM scans) as scans_count
        `);

        const stats = finalStats.rows[0];
        console.log(`   üéØ –°–æ–±—ã—Ç–∏—è: ${stats.events_count}`);
        console.log(`   üë• –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏: ${stats.visitors_count}`);
        console.log(`   üîó –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ —Å —Å–æ–±—ã—Ç–∏—è–º–∏: ${stats.visitors_with_events}`);
        console.log(`   üì± –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${stats.scans_count}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        const viewTest = await pool.query('SELECT * FROM events_stats LIMIT 1');
        console.log(`   üìà –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ events_stats: ${viewTest.rows.length > 0 ? '—Ä–∞–±–æ—Ç–∞–µ—Ç' : '–ø—Ä–æ–±–ª–µ–º—ã'}`);

        console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log('\nüí° –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:');
        console.log('   ‚ú® –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ–±—ã—Ç–∏–π');
        console.log('   ‚ú® –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–≤—è–∑—ã–≤–∞—é—Ç—Å—è –∫ —Å–æ–±—ã—Ç–∏—è–º');
        console.log('   ‚ú® –ù–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–±—ã—Ç–∏—è–º');
        console.log('   ‚ú® API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏');

        console.log('\nüöÄ –û–±–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–π —Å–µ—Ä–≤–µ—Ä:');
        console.log('   1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä');
        console.log('   2. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª routes/events.js');
        console.log('   3. –û–±–Ω–æ–≤–∏—Ç–µ server.js');
        console.log('   4. –û–±–Ω–æ–≤–∏—Ç–µ public/index.html');
        console.log('   5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∑–∞–Ω–æ–≤–æ');

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', err);

        if (err.code === 'ECONNREFUSED') {
            console.error('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞');
        } else if (err.code === '42P01') {
            console.error('üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏. –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å init.sql —Å–Ω–∞—á–∞–ª–∞');
        }

        process.exit(1);
    } finally {
        await pool.end();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
async function rollbackMigration() {
    console.log('üîÑ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...\n');

    const pool = new Pool(dbConfig);

    try {
        await pool.query('SELECT 1');
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        // –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É event_id –∏–∑ visitors (–µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)
        const visitorsWithEvents = await pool.query('SELECT COUNT(*) as count FROM visitors WHERE event_id IS NOT NULL');

        if (parseInt(visitorsWithEvents.rows[0].count) === 0) {
            console.log('üìã –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ event_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã visitors...');
            await pool.query('ALTER TABLE visitors DROP COLUMN IF EXISTS event_id');
            console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ event_id —É–¥–∞–ª–µ–Ω–∞');
        } else {
            console.log('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Å–æ–±—ã—Ç–∏—è–º. –ö–æ–ª–æ–Ω–∫–∞ event_id –Ω–µ —É–¥–∞–ª–µ–Ω–∞.');
        }

        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–∏
        console.log('üìã –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –∏ —Ñ—É–Ω–∫—Ü–∏–π...');
        await pool.query('DROP VIEW IF EXISTS events_stats');
        await pool.query('DROP FUNCTION IF EXISTS get_event_stats');
        console.log('‚úÖ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã');

        // –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É events (–µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)
        const eventsCount = await pool.query('SELECT COUNT(*) as count FROM events');

        if (parseInt(eventsCount.rows[0].count) === 0) {
            console.log('üìã –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã events...');
            await pool.query('DROP TABLE IF EXISTS events CASCADE');
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ events —É–¥–∞–ª–µ–Ω–∞');
        } else {
            console.log('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑–µ. –¢–∞–±–ª–∏—Ü–∞ events –Ω–µ —É–¥–∞–ª–µ–Ω–∞.');
        }

        console.log('\n‚úÖ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞:', err);
        process.exit(1);
    } finally {
        await pool.end();
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const command = process.argv[2];

    switch (command) {
        case 'migrate':
        case 'up':
            await runMigration();
            break;
        case 'rollback':
        case 'down':
            const confirmed = process.argv[3] === '--confirm';
            if (!confirmed) {
                console.log('‚ö†Ô∏è  –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö!');
                console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node migrate-to-events.js rollback --confirm');
                return;
            }
            await rollbackMigration();
            break;
        case 'status':
            await checkMigrationStatus();
            break;
        default:
            console.log('üîß –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ–±—ã—Ç–∏–π');
            console.log('==========================================');
            console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
            console.log('  node migrate-to-events.js migrate     # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é');
            console.log('  node migrate-to-events.js rollback --confirm # –û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é');
            console.log('  node migrate-to-events.js status      # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å');
            console.log('');
            console.log('–ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç:');
            console.log('  - –¢–∞–±–ª–∏—Ü—É events');
            console.log('  - –ö–æ–ª–æ–Ω–∫—É event_id –≤ visitors');
            console.log('  - –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            console.log('  - –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è');
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
async function checkMigrationStatus() {
    const pool = new Pool(dbConfig);

    try {
        await pool.query('SELECT 1');
        console.log('üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É events
        const eventsTable = await pool.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'events'
            );
        `);
        console.log(`üìã –¢–∞–±–ª–∏—Ü–∞ events: ${eventsTable.rows[0].exists ? '‚úÖ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É event_id
        const eventIdColumn = await pool.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.columns 
                WHERE table_name = 'visitors' 
                AND column_name = 'event_id'
            );
        `);
        console.log(`üîó –ö–æ–ª–æ–Ω–∫–∞ event_id: ${eventIdColumn.rows[0].exists ? '‚úÖ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        const eventsStatsView = await pool.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.views 
                WHERE table_schema = 'public' 
                AND table_name = 'events_stats'
            );
        `);
        console.log(`üìà –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ events_stats: ${eventsStatsView.rows[0].exists ? '‚úÖ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);

        // –°—á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if (eventsTable.rows[0].exists) {
            const counts = await pool.query(`
                SELECT 
                    (SELECT COUNT(*) FROM events) as events,
                    (SELECT COUNT(*) FROM visitors WHERE event_id IS NOT NULL) as visitors_with_events
            `);
            console.log(`üéØ –°–æ–±—ã—Ç–∏—è –≤ –±–∞–∑–µ: ${counts.rows[0].events}`);
            console.log(`üë• –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ —Å —Å–æ–±—ã—Ç–∏—è–º–∏: ${counts.rows[0].visitors_with_events}`);
        }

        const migrationComplete = eventsTable.rows[0].exists && eventIdColumn.rows[0].exists && eventsStatsView.rows[0].exists;
        console.log(`\nüèÅ –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏: ${migrationComplete ? '‚úÖ –ó–ê–í–ï–†–®–ï–ù–ê' : '‚ùå –ù–ï –ó–ê–í–ï–†–®–ï–ù–ê'}`);

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', err);
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main().catch(console.error);
}

module.exports = { runMigration, rollbackMigration, checkMigrationStatus };