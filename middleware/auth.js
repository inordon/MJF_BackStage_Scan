const { query } = require('../config/database');

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function requireAuth(req, res, next) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
        if (!req.session.userId) {
            return res.status(401).json({
                error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
                redirectTo: '/login'
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const userResult = await query(
            'SELECT id, username, role, full_name, is_active FROM users WHERE id = $1',
            [req.session.userId]
        );

        if (!userResult.rows.length || !userResult.rows[0].is_active) {
            req.session.destroy();
            return res.status(401).json({
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
                redirectTo: '/login'
            });
        }

        req.user = userResult.rows[0];
        next();
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function requireRole(allowedRoles) {
    return (req, res, next) => {
        if (!req.user) {
            return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
        }

        if (!allowedRoles.includes(req.user.role)) {
            return res.status(403).json({
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞',
                required: allowedRoles,
                current: req.user.role
            });
        }

        next();
    };
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async function requireScanAuth(req, res, next) {
    try {
        // –î–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—é–±–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (!req.session.userId) {
            return res.status(401).json({
                error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
                redirectTo: '/login'
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const userResult = await query(
            'SELECT id, username, role, full_name, is_active FROM users WHERE id = $1',
            [req.session.userId]
        );

        if (!userResult.rows.length || !userResult.rows[0].is_active) {
            req.session.destroy();
            return res.status(401).json({
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
                redirectTo: '/login'
            });
        }

        const user = userResult.rows[0];

        // –í—Å–µ —Ä–æ–ª–∏ –º–æ–≥—É—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
        if (!['admin', 'moderator', 'skd'].includes(user.role)) {
            return res.status(403).json({
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'
            });
        }

        req.user = user;
        next();
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
}

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function logUserAction(action) {
    return async (req, res, next) => {
        try {
            const logData = {
                userId: req.user?.id,
                action: action,
                ip: req.ip,
                userAgent: req.get('User-Agent'),
                timestamp: new Date(),
                path: req.path,
                method: req.method
            };

            // –í production –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            if (process.env.NODE_ENV === 'development') {
                console.log('üë§ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', logData);
            }

            next();
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è:', err);
            next(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        }
    };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
function canModifyVisitor(req, res, next) {
    const userRole = req.user.role;

    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ
    if (['admin', 'moderator'].includes(userRole)) {
        return next();
    }

    return res.status(403).json({
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π'
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
function canBlockVisitor(req, res, next) {
    const userRole = req.user.role;

    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
    if (['admin', 'moderator'].includes(userRole)) {
        return next();
    }

    return res.status(403).json({
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π'
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function canManageUsers(req, res, next) {
    const userRole = req.user.role;

    // –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    if (userRole === 'admin') {
        return next();
    }

    return res.status(403).json({
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'
    });
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è UUID –¥–ª—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
function validateVisitorUUID(req, res, next) {
    const { uuid } = req.params;

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ UUID
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;

    if (!uuid || !uuidRegex.test(uuid)) {
        return res.status(400).json({
            error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è'
        });
    }

    next();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
function canExportData(req, res, next) {
    const userRole = req.user.role;

    // –í—Å–µ —Ä–æ–ª–∏ –º–æ–≥—É—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ —Å —Ä–∞–∑–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
    if (['admin', 'moderator', 'skd'].includes(userRole)) {
        // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–≥—É—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë
        // –°–ö–î –º–æ–∂–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        req.exportPermissions = {
            canExportVisitors: ['admin', 'moderator'].includes(userRole),
            canExportUsers: userRole === 'admin',
            canExportScans: true, // –í—Å–µ –º–æ–≥—É—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            canExportEvents: ['admin', 'moderator'].includes(userRole),
            canViewPersonalData: ['admin', 'moderator'].includes(userRole)
        };
        return next();
    }

    return res.status(403).json({
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö'
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (–±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
function canExportScanStatistics(req, res, next) {
    const userRole = req.user.role;

    // –í—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    if (['admin', 'moderator', 'skd'].includes(userRole)) {
        // –ù–æ —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        req.exportPermissions = {
            canViewPersonalData: ['admin', 'moderator'].includes(userRole),
            canViewAllEvents: ['admin', 'moderator'].includes(userRole),
            canViewDetailedStats: true,
            maxExportRows: userRole === 'admin' ? null : 1000 // –°–ö–î –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã 1000 –∑–∞–ø–∏—Å—è–º–∏
        };
        return next();
    }

    return res.status(403).json({
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
function checkExportLimits(req, res, next) {
    const userRole = req.user.role;
    const { limit, date_from, date_to } = req.query;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
    const limits = {
        admin: { maxRows: null, maxDaysRange: null },
        moderator: { maxRows: 5000, maxDaysRange: 365 },
        skd: { maxRows: 1000, maxDaysRange: 30 }
    };

    const userLimits = limits[userRole];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å—Ç—Ä–æ–∫
    if (userLimits.maxRows && limit && parseInt(limit) > userLimits.maxRows) {
        return res.status(400).json({
            error: `–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞. –ú–∞–∫—Å–∏–º—É–º ${userLimits.maxRows} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–æ–ª–∏ ${userRole}`
        });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    if (userLimits.maxDaysRange && date_from && date_to) {
        const fromDate = new Date(date_from);
        const toDate = new Date(date_to);
        const daysDiff = Math.ceil((toDate - fromDate) / (1000 * 60 * 60 * 24));

        if (daysDiff > userLimits.maxDaysRange) {
            return res.status(400).json({
                error: `–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç. –ú–∞–∫—Å–∏–º—É–º ${userLimits.maxDaysRange} –¥–Ω–µ–π –¥–ª—è —Ä–æ–ª–∏ ${userRole}`
            });
        }
    }

    next();
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
function logExportAction(exportType) {
    return async (req, res, next) => {
        try {
            const logData = {
                userId: req.user?.id,
                username: req.user?.username,
                action: `export_${exportType}`,
                exportType: exportType,
                ip: req.ip,
                userAgent: req.get('User-Agent'),
                timestamp: new Date(),
                filters: {
                    event_id: req.query.event_id,
                    status: req.query.status,
                    date_from: req.query.date_from,
                    date_to: req.query.date_to,
                    format: req.query.format
                }
            };

            // –í production –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞—É–¥–∏—Ç–∞
            if (process.env.NODE_ENV === 'development') {
                console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:', logData);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ë–î
            req.exportLog = logData;
            next();
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞:', err);
            next(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        }
    };
}

// –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª—è
module.exports = {
    requireAuth,
    requireRole,
    requireScanAuth,
    logUserAction,
    canModifyVisitor,
    canBlockVisitor,
    canManageUsers,
    validateVisitorUUID,
    canExportData,
    canExportScanStatistics,
    checkExportLimits,
    logExportAction
};
module.exports = {
    requireAuth,
    requireRole,
    requireScanAuth,
    logUserAction,
    canModifyVisitor,
    canBlockVisitor,
    canManageUsers,
    validateVisitorUUID
};